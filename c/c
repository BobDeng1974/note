________________________________
A.9 Statements
Except as described, statements are executed in sequence. Statements are executed for their effect, and do
not have values. They fall into several groups.
statement:
labeled-statement
expression-statement
compound-statement
selection-statement
iteration-statement
jump-statement

A.9.1 Labeled Statements
Statements may carry label prefixes.
labeled-statement:
identifier : statement
case constant-expression : statement
default : statement
A label consisting of an identifier declares the identifier. The only use of an identifier label is as a target
of goto. The scope of the identifier is the current function. Because labels have their own name space,
they do not interfere with other identifiers and cannot be redeclared. See Par.A.11.1.
Case labels and default labels are used with the switch statement (Par.A.9.4). The constant expression
of case must have integral type.
Labels themselves do not alter the flow of control.

A.9.2 Expression Statement
Most statements are expression statements, which have the form
expression-statement:
expressionopt;
Most expression statements are assignments or function calls. All side effects from the expression are
completed before the next statement is executed. If the expression is missing, the construction is called a
null statement; it is often used to supply an empty body to an iteration statement to place a label.
A.9.3 Compound Statement
So that several statements can be used where one is expected, the compound statement (also called
``block'') is provided. The body of a function definition is a compound statement.
compound-statement:
{ declaration-listopt statement-listopt }
declaration-list:
declaration
declaration-list declaration
statement-list:
statement
statement-list statement
If an identifier in the declaration-list was in scope outside the block, the outer declaration is suspended
within the block (see Par.A.11.1), after which it resumes its force. An identifier may be declared only
once in the same block. These rules apply to identifiers in the same name space (Par.A.11); identifiers in
different name spaces are treated as distinct.
Initialization of automatic objects is performed each time the block is entered at the top, and proceeds in
the order of the declarators. If a jump into the block is executed, these initializations are not performed.
Initialization of static objects are performed only once, before the program begins execution.
A.9.4 Selection Statements
Selection statements choose one of several flows of control.

selection-statement:
if (expression) statement
if (expression) statement else statement
switch (expression) statement
In both forms of the if statement, the expression, which must have arithmetic or pointer type, is
evaluated, including all side effects, and if it compares unequal to 0, the first substatement is executed. In
the second form, the second substatement is executed if the expression is 0. The else ambiguity is
resolved by connecting an else with the last encountered else-less if at the same block nesting level.
The switch statement causes control to be transferred to one of several statements depending on the
value of an expression, which must have integral type. The substatement controlled by a switch is
typically compound. Any statement within the substatement may be labeled with one or more case
labels (Par.A.9.1). The controlling expression undergoes integral promotion (Par.A.6.1), and the case
constants are converted to the promoted type. No two of these case constants associated with the same
switch may have the same value after conversion. There may also be at most one default label
associated with a switch. Switches may be nested; a case or default label is associated with the
smallest switch that contains it.
When the switch statement is executed, its expression is evaluated, including all side effects, and
compared with each case constant. If one of the case constants is equal to the value of the expression,
control passes to the statement of the matched case label. If no case constant matches the expression,
and if there is a default label, control passes to the labeled statement. If no case matches, and if there
is no default, then none of the substatements of the swtich is executed.
In the first edition of this book, the controlling expression of switch, and the case constants, were required to
have int type.
A.9.5 Iteration Statements
Iteration statements specify looping.
iteration-statement:
while (expression) statement
do statement while (expression);
for (expressionopt; expressionopt; expressionopt) statement
In the while and do statements, the substatement is executed repeatedly so long as the value of the
expression remains unequal to 0; the expression must have arithmetic or pointer type. With while, the
test, including all side effects from the expression, occurs before each execution of the statement; with
do, the test follows each iteration.
http://freebooks.by.ru/view/CProgrammingLanguage/appa.html (42 of 64) [9/6/2002 12:23:40 ]
Appendix A - Reference Manual
In the for statement, the first expression is evaluated once, and thus specifies initialization for the loop.
There is no restriction on its type. The second expression must have arithmetic or pointer type; it is
evaluated before each iteration, and if it becomes equal to 0, the for is terminated. The third expression
is evaluated after each iteration, and thus specifies a re-initialization for the loop. There is no restriction
on its type. Side-effects from each expression are completed immediately after its evaluation. If the
substatement does not contain continue, a statement
for (expression1; expression2; expression3) statement
is equivalent to
expression1;
while (expression2) {
statement
expression3;
}
Any of the three expressions may be dropped. A missing second expression makes the implied test
equivalent to testing a non-zero element.
A.9.6 Jump statements
Jump statements transfer control unconditionally.
jump-statement:
goto identifier;
continue;
break;
return expressionopt;
In the goto statement, the identifier must be a label (Par.A.9.1) located in the current function. Control
transfers to the labeled statement.
A continue statement may appear only within an iteration statement. It causes control to pass to the
loop-continuation portion of the smallest enclosing such statement. More precisely, within each of the
statements
while (...) {
...
contin: ;
}
do {
...
contin: ;
} while (...);
for (...) {
...
contin: ;
}

a continue not contained in a smaller iteration statement is the same as goto contin.
A break statement may appear only in an iteration statement or a switch statement, and terminates
execution of the smallest enclosing such statement; control passes to the statement following the
terminated statement.
A function returns to its caller by the return statement. When return is followed by an expression,
the value is returned to the caller of the function. The expression is converted, as by assignment, to the
type returned by the function in which it appears.
Flowing off the end of a function is equivalent to a return with no expression. In either case, the returned
value is undefined.









________________________________
A.10 External Declarations

C编译器处理的输入单元成为编译单元。它由一连串外部声明语句组成，外部声明语句可以是声明或者是函数定义

translation-unit:
external-declaration

external-declaration:
function-definition
declaration

外部声明的作用域在编译单元的末尾出结束，像在语句块中的声明作用域只在语句块中。外部声明的语法像其他声明
一样，除了外部声明可能会给出函数代码。

A.10.1 Function Definitions
函数定义的结构：
function-definition:
declaration-specifier[sopt] declarator declaration-listopt compound-statement


在声明中使用的修饰符，唯一允许的storage-class(存储类型)的是extern或static

A function may return an arithmetic type, a structure, a union, a pointer, or void, but not a function or
an array. The declarator in a function declaration must specify explicitly that the declared identifier has
function type; that is, it must contain one of the forms (see Par.A.8.6.3).
direct-declarator ( parameter-type-list )
direct-declarator ( identifier-listopt )
where the direct-declarator is an identifier or a parenthesized identifier. In particular, it must not achieve
function type by means of a typedef.
In the first form, the definition is a new-style function, and its parameters, together with their types, are
declared in its parameter type list; the declaration-list following the function's declarator must be absent.
Unless the parameter type list consists solely of void, showing that the function takes no parameters,
each declarator in the parameter type list must contain an identifier. If the parameter type list ends with
``, ...'' then the function may be called with more arguments than parameters; the va_arg macro
mechanism defined in the standard header <stdarg.h> and described in Appendix B must be used to
refer to the extra arguments. Variadic functions must have at least one named parameter.
In the second form, the definition is old-style: the identifier list names the parameters, while the
declaration list attributes types to them. If no declaration is given for a parameter, its type is taken to be
int. The declaration list must declare only parameters named in the list, initialization is not permitted,
and the only storage-class specifier possible is register.
In both styles of function definition, the parameters are understood to be declared just after the beginning
of the compound statement constituting the function's body, and thus the same identifiers must not be
redeclared there (although they may, like other identifiers, be redeclared in inner blocks). If a parameter
is declared to have type ``array of type,'' the declaration is adjusted to read ``pointer to type;'' similarly, if
a parameter is declared to have type ``function returning type,'' the declaration is adjusted to read
``pointer to function returning type.'' During the call to a function, the arguments are converted as
necessary and assigned to the parameters; see Par.A.7.3.2.
New-style function definitions are new with the ANSI standard. There is also a small change in the details of
promotion; the first edition specified that the declarations of float parameters were adjusted to read double.
The difference becomes noticable when a pointer to a parameter is generated within a function.
A complete example of a new-style function definition is
int max(int a, int b, int c)
{
int m;
m = (a > b) ? a : b;
return (m > c) ? m : c;
}
Here int is the declaration specifier; max(int a, int b, int c) is the function's declarator,
and { ... } is the block giving the code for the function. The corresponding old-style definition
would be
int max(a, b, c)
int a, b, c;
{
/* ... */
}
where now int max(a, b, c) is the declarator, and int a, b, c; is the declaration list for the
parameters.

A.10.2 External Declarations
External declarations说明了对象，函数或其他标识符的特性。“external”指这些定义在函数外面(函数调用他们)
并不直接和extern关键字有联系。externally-declared声明的对象的存储特性可以为空，可以是static或extern

在一个编译单元中，如果类型和链接允许，一个标识符可能有多个声明，但标识符的定义最多只有一个。











如果第一个函数或对象的external declarator包含static修饰，则该标识符将会是内部链接，否则它是外部链接。

如果一个对象的external declaration有初始化，则是对该对象的定义。
一个外部对象的声明没有初始化，也没有extern修饰，则它是一个暂时的定义。如果该对象的定义出现在编译单元中
则暂时定义仅被看作一个冗余声明。如果没有定义出现，则暂时定义被看作初始化值为0的定义。

每个对象只有一个定义。内部链接的对象，是对编译单元来说只有一个定义。外部链接的对象对整个程序来说只有一个
定义


在unix系统中，所有的外部链接的暂时定义对象，作用域是程序的所有编译单元。如果定义在某处出现，则暂时定义
仅仅是一个声明。如果没有出现定义，则暂时定义是初始化为0的定义。

________________________________
A.11 Scope and Linkage

一个程序可能不是一次编译完成的：源码有多个文件，有已经编译好的库文件。程序中函数的交互可能是
调用或者是外部数据处理。


有两种作用域要考虑：lexical(词汇)作用域，标识符的特性在程序中能够被理解。第二种，外部链接的对象和函数
的作用域，建立了不同编译单元中标识符的连接。


A.11.1 Lexical Scope
标识符在不同的命名空间。在不同的命名空间中可以有相同的标识符。这些类型是：对象，函数,typedef名,
枚举常量,标签,结构体和联合体的标记,枚举,结构体和联合体的成员。

函数参数的作用域从函数头开始到结束。语句块中标识符的作用域从声明处到语句块结尾。标签作用域在整个函数中。
语句块内部的标识符将屏蔽外部同名的标识符












A.11.2 Linkage
在一个编译单元中，所有内部链接的对象和函数的声明都指向相同对象。
所有对同一对象的声明，在使用外部链接也是指向同一事物，并且是程序全局共享的。

使用static修饰符的声明是内部链接，其他的是外部链接。
如果在一语句块中的标识符没有使用extern修饰，则该标识符没有链接，且在函数中是唯一的。如果使用extern修饰
，而且在改语句块中有一个的相同的声明，则该标识符与那个声明的标识相同()。如果在语句块的访问域中没有其它的声明
则该标识符是外部链接
