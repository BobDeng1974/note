//usb host




探测到设备注册：
hub_thread(开始线程处理事件)-->hub_events
-->(连接状态改变)hub_port_connect_change@hub.c-->usb_alloc_dev@usb.c


匹配驱动：
usb_bus_type.match-->usb_device_match(判断usb设备，usb接口是否与相应的驱动匹配)-->usb_match_id
(查找驱动id_table)-->usb_match_one_id-->usb_match_device@driver.c
调用probe:
new_driver->drvwrap.driver.probe-->usb_probe_interface@driver.c


___________________
//操作函数






===================
//usb设备





//usb设备驱动
usb_register@usb.h-->usb_register_driver{
- new_driver->drvwrap.driver{//创建并设置普通驱动
	- usb_bus_type，设置bus类型
	- usb_probe_interface,设置probe
	}
}@driver.c


//设备probe
usb_probe_interface{ //普通设备探测
- driver = to_usb_driver(dev->driver)，获取usb设备的驱动
- driver->prove，调用usb驱动的probe
}


include/linux/usb.h
drivers/usb/core/driver.c



=====================
//usb_audio

snd_usb_init_substream@endpoint.c


//play
snd_pcm_f_opssnd_pcm_playback_ioctl-->snd_pcm_playback_ioctl1@pcm_native.c-->
snd_pcm_lib_write-->snd_pcm_lib_write1{
- transfer-->snd_pcm_lib_write_transfer //传输用户空间数据
- snd_pcm_start-->snd_pcm_action(snd_pcm_action_start){//开始处理数据(播放)
	- snd_pcm_pre_start
	- snd_pcm_do_start-->substream->ops->trigger
	} 
}@pcm_lib.c

sound/core/pcm_native.c
sound/core/pcm_lib.c


snd_pcm_prepare-->snd_pcm_action_prepare
snd_pcm_action_prepare.do_action
snd_pcm_do_prepare-->
snd_usb_playback_ops.prepare-->
snd_usb_pcm_prepare@pcm.c-->snd_usb_substream_prepare-->start_urbs-->usb_submit_urb
@endpoint.c

sound/usb/pcm.c
sound/usb/endpoint.c
