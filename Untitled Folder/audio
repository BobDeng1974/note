//audio

//开一个线程处理设备选择
hal_module_methods.open-->adev_open{
- 创建tiny_audio_device adev
- 初始化adev->hw_device{ //设置audio_hw_device
	- adev_set_parameters //设置参数
	- adev_open_output_stream //打开output
	- adev_open_output_stream //打开intput
	}
- 设置mixer,adev->mixer = mixer_open
- 参数vb_effect_getpara //audio_param
- adev_config_parse //解析tiny_hw.xml
- stream_routing_manager_create-->stream_routing_thread_entry //创建路径设置进程
- audio_bt_sco_thread_create //bt 
}

//解析配置
adev_open-->adev_config_parse{
- 文件tiny_hw.xml
- adev_config_start//解析配置，并保存到adev.dev_cfgs中
}

//选择路径
select_devices_signal/select_devices_signal_asyn-->
do_select_devices{
- 
}


____________
//参数设置
AudioSystem::setParameters-->

//stream 参数
AudioFlinger::setParameters-->AudioFlinger::ThreadBase::setParameters-->
SetParameterConfigEvent-->processConfigEvents_l(CFG_EVENT_SET_PARAMETER)-->
AudioFlinger::MixerThread::checkForNewParameter_l-->
outputStrem.set_parameters-->out_set_parameters

inputStream.set_parameters-->in_set_parameters

//全局参数
AudioFlinger::setParameters(设置非iohandle参数)-->set_parameters-->adev_set_parameters



audiopara_tuning_thread_entry


=============
//play
adev_open_output_stream{
- 创建out，tiny_stream_out
- 初始化，out->stream{ //设置参数设置接口out_set_parameters 等..
	- out_set_parameters
	- out_write
	}
- 
}

//out
out_write{
- out_bypass_data //丢弃一些数据，还没准备好
- do_output_standby //若is_voip，AUDIO_MODE_IN_CALL状态变化则先standby
- start_output_stream{

	}
- 使用nxp:NxpTfa_Write
- is_voip:out_write_sco 
- is_bt_sco:out_write_bt_sco
- call_connected:out_write_vaudio
- 其他直接写数据
}
=============
//record
adev_open_input_stream{
- in->stream初始化{
	- in_read
	}
}

in_read{
- 
}

=============
//debug
audiodebug_process
