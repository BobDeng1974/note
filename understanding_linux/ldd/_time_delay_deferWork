




____________________________________
tasklet:
通常在处理中断时使用(中断处理必须快速，其他工作可以放入tasklet中在将来某个时候执行)。
运行在中断时间，运行在调度它们的cpu上，能够接收一个无符号长整形参数。
struct tasklet_struct {
/* ... */

void (*func)(unsigned long);
unsigned long data;
};
void tasklet_init(struct tasklet_struct *t,
void (*func)(unsigned long), unsigned long data);
DECLARE_TASKLET(name, func, data);
DECLARE_TASKLET_DISABLED(name, func, data);

执行：
void tasklet_schedule(struct tasklet_struct *t);
void tasklet_hi_schedule(struct tasklet_struct *t) //高优先级执行，减少延时
____________________________________
workqueue：
类似tasklet使工作在将来某个时刻执行。但有些不同：
-tasklet运行在软中段上下文，操作是原子的。workqueue运行在内核进程中，可以睡眠。
-tasklet只能运行在提交它的cpu上。workqueue默认工作方式也是这样(应该可以改变)
-tasklet不能指定工作时间。workqueue可以指定在某个间隔后执行
关键不同是tasklet快速，但必须是原子执行。workqueue延时较长，但不必原子。

创建工作队列：
struct workqueue_struct *create_workqueue(const char *name); //每个处理器一个工作线程
struct workqueue_struct *create_singlethread_workqueue(const char *name); //只一个工作线程

创建工作：工作结构中包含要执行的函数，要传入的参数
DECLARE_WORK(name, void (*function)(void *), void *data);

INIT_WORK(struct work_struct *work, void (*function)(void *), void *data);
PREPARE_WORK(struct work_struct *work, void (*function)(void *), void *data);

提交工作到队列：
int queue_work(struct workqueue_struct *queue, struct work_struct *work);
int queue_delayed_work(struct workqueue_struct *queue,struct work_struct *work, unsigned long delay);

取消工作：
int cancel_delayed_work(struct work_struct *work);

保证上面函数执行后工作不会在其它处理器被执行，要调用：
void flush_workqueue(struct workqueue_struct *queue);

销毁workqueue：
void destroy_workqueue(struct workqueue_struct *queue);

-------------------------------
共享队列(内核提供)：
INIT_WORK(struct work_struct *work, void (*function)(void *), void *data);
schedule_work(&work);
schedule();

schedule_delayed_work

__________________________________
异步进程的执行上下文，用来执行异步工作。将工作项加入到一个队列，一个独立线程执行队列中的工作。
工作队列中的工作项都被完成，工作线程进入空状态。一旦工作项被加入队列，工作线程开始执行。

多线程工作队列：每个cpu有一个工作线程
单线程工作队列：系统中只有一个工作线程

Concurrency Managed Workqueue (cmwq)
1，与原来的接口兼容
2，每个cpu的工作池由所有工作队列共享
3，自动调整工作池和并行

cmwq的组成：工作项，工作线程。
用户将子系统和驱动的工作加入到工作队列。(gcwq)后端结构管理线程池，处理队列中的工作

处理并行数(concurrency level)

————————————————————————————————————
api:
alloc_workqueue(name,flags,max_active)分配一个工作队列
max_active参数定义cpu最多同时执行的工作项个数。
