//
struct vivi_dev {
 struct list_head           vivi_devlist;
 struct v4l2_device 	   v4l2_dev;
 struct v4l2_ctrl_handler   ctrl_handler;
 struct video_device	   vdev;
 struct v4l2_ctrl	   *brightness;
 ....
 struct vb2_queue	   vb_vidq;
}

//file operation
static const struct v4l2_ctrl_ops vivi_ctrl_ops = {
	.g_volatile_ctrl = vivi_g_volatile_ctrl,
	.s_ctrl = vivi_s_ctrl,
};

//unlocked_ioctl-->video_ioctl2-->struct v4l2_ctrl_handler
static const struct v4l2_file_operations vivi_fops = {
	.release        = vb2_fop_release,
	.read           = vb2_fop_read,
	.poll		= vb2_fop_poll,
	.unlocked_ioctl = video_ioctl2, /* V4L2 ioctl handler */
	.mmap           = vb2_fop_mmap,
};

//video device
static const struct video_device vivi_template = {
	.name		= "vivi",
	.fops           = &vivi_fops,
	.ioctl_ops 	= &vivi_ioctl_ops,
	.release	= video_device_release_empty,
};


//初始化,创建设备
vivi_init-->vivi_create_instance{
- struct vivi_dev *dev = kzalloc(sizeof(*dev)
- v4l2_device_register(NULL, &dev->v4l2_dev) //注册v4l2_device

- struct v4l2_ctrl_handler *hdl = &dev->ctrl_handler
- v4l2_ctrl_handler_init(hdl, 11) //初始化ctrl
- dev->brightness = v4l2_ctrl_new_std(hdl, &vivi_ctrl_ops,V4L2_CID_BRIGHTNESS)//
- ...
- dev->v4l2_dev.ctrl_handler = hdl

- struct vb2_queue *q = &dev->vb_vidq //queue
- q->ops = &vivi_video_qops //设置queue操作函数
- vb2_queue_init(q)

- struct video_device *vfd = &dev->vdev //video deivce
- &vfg = vivi_template
- vfd->queue = q //设置video queue
- video_register_device(vfd) //注册video device
}

//开始数据流
vivi_video_qops.start_streaming-->start_streaming-->vivi_start_generating-->
kthread_run(vivi_thread)-->vivi_thread-->vivi_sleep{//循环执行vivi_sleep
- DECLARE_WAITQUEUE(wait, current)
- add_wait_queue(&dma_q->wq, &wait) //加入到睡眠队列
- vivi_thread_tick{
	- struct vivi_buffer *buf = list_entry(dma_q->active.next, struct vivi_buffer)//获取buffer
	- vivi_fillbuff(dev, buf) //填充数据
	- vb2_buffer_done
	}
- schedule_timeout_interruptible //开始睡眠并定时唤醒
}



kernel/drivers/media/platform/vivi.c
