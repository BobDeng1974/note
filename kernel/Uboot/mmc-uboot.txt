uboot/drivers/block/Prima2SD.c

start_armboot@board.c-->block_init@block.c-->(mmc_dev_fn_tbl-->mmc_blk_init)@block.cmmc_blk_init@mmc_blk.c-->
mmc_init@Prima2SD.c-->SDMMC_Init-->card_initialize@Prima2SD.c-->bus_power@Prima2SD.c-->WaitInterrupt@Prima2SD.c

block_init传入的参数其实为sd卡slot，最终调用为mmc_init根据参数初始化对应的sd卡
fat_register_device@fat.c注册过程将cur_dev设置为当前要读的设备，在调用fat.c中函数读取数据时就是对该设备操作。(这里主要是初始化设备结构体中的操作函数)


get_dev@cmd_fat.c-->block_get_dev1@block.c(这里会fat_register_device(&block_dev1, dev);)
-->&block_dev1(赋值block_dev1.block_read = block1_dev_read;)--
block1_dev_read(int dev, unsigned long blknr,
		lbaint_t blkcnt, unsigned long *buffer)@block.c(这里返回了blkcnt)		
-->block1_read@block.c-->blk_dev_fn_tbls[1]->read--mmc_blk_read@mmc_blk.c-->mmc_read@Prima2SD.c-->SDMMC_ReadSector@Prima2SD.c
-->send_sd_rw_cmd@Prima2SD.c-->WaitInterrupt@Prima2SD.c(error集中)


g_pSd和g_pSlotStatus在调用moveSdSlotFocus时会被赋给正确的值(对应的寄存器)
g_pSlotStatus在SaveRegisters中保存g_pSd控制寄存器的值，这些值在HC复位时使用

sdGlobalInit@Prima2SD.c会将sd卡复位，所以要重新初始化

读取第一次成功，后面的都会超时：超时复位并没有真正的poweroff复位

读写sd卡的地址：HC为sector单位(512bytes),SC为byte单位(1byte)。


intStatus: 0x010a8120
---  01|24-AUTO_CMD12_ERR          0a|19-CMD_INDEX_ERR 17-CMD_CRC_ERR 	 81|15-ERR_INT 8-SD_CARD_INTR  20|5-BUFF_RD_RDY
auto_cmd12 由于前面命令的错误，cmd12没有发送

降低频率再次测试，查看寄存器的值是否有错误
写时，在写入一个block时HC会停止等待传送完。读时，(SDID则由卡的特性支持)sd卡由HC停止时钟终止传送，终止的时间应该是由
BLK_SIZE，BLK_CNT(SD_BLK_PARAMETER, 0x0004)控制

命令格式
Bit position    47          46              [45:40]        [39:8]    [7:1]    0
Width(bits)     1           1                 6              32       7       1
Value           ‘0’         ‘1’               x               x       x      ‘1’
Description   start bit  transmission bit  command index  argument   CRC7   end bit

SD 假定一个电压发送CMD0，
然后在再送CMD8(包括电压参数)。如果回复了表示sd卡支持(Specification Version 2.00)
发送ACMD41，参数包括VDD(OCR)(设置为零可进行查询sd卡支持的电压，不为零则是sd卡进行初始化)如果sd卡不支持进入inactive状态。返回sd卡OCR

1 << 31 | 0x00FFFFF1
FAT(file allocation table)文件分配表。
主要的概念有，FAT，目录项。
根目录一般在2号簇。
文件分配表中有记录项(4 bytes)对应着簇号,记录项中的值可表示对应的簇没有使用，簇损坏，下一个簇号(文件大于一个簇)，文件结束。
目录项记录着文件的开始簇，时间，类型等信息。

========================================
主要流程：
start_armboot@board.c-->main_loop@main.c-->cmd_process@command.c

侦测卡：
(mmc_initialize@mmc.c-->board_mmc_init-->cb2_mmc_initialize@cb2_mmc.c赋值mmc->init)mmc_core_init-->_CardDetect-->@cb2_mmc.c-->Hal_SDMMC_CardDetect@hal_sdmmc.c
________________________________________
运行命令：
run_command-->builtin_run_command@main.c
构造命令 U_BOOT_CMD(name,maxargs,rep,cmd,usage,help)，命令的格式是cmd_tbl_t 结构体。查找命令使用
find_command函数
________________________________________
emmc命令
dstar命令：
U_BOOT_CMD(
	dstar,  CONFIG_SYS_MAXARGS,	1,	do_dstar,
	"script via SD/MMC",
	""
);
201204_01/common/cmd_mstar.c
________________________________________
mstar中:

创建磁盘分区：：do_emmc_cis@cmd_mstar.c-->Write_EMMC_CIS-->eMMC_WriteCIS@eMMC_prg.c-->init_NVRAM_pdb-->
part_emmc_write_ddb@part_emmc.c

增加分区：emmc create-->do_emmc@cmd_mstar.c-->create_new_NVRAM_partition-->add_NVRAM_pdb-->part_emmc_write_pdb@part_emmc.c-->eMMC_WriteData@part_emmc.c

写分区：
emmc wirte.p-->do_mmc_write_emptyskip@cmd_mstar.c-->mmc->block_dev.block_write-->

初始化读取地址:eMMC_SearchDevNodeStartSector@eMMC_prg.c-->u32_PartDevNodeStartSector(赋值)


-----------------------------------------
查找mmc设备
do_emmc@cmd_mstar.c-->find_mmc_device@mmc.c-->

注册设备：
mmc_initialize@mmc.c-->board_emmc_init@eMMC_prg.c-->mmc_register@mmc.c

start.S-->board_init_r@board.c-->mmc_initialize@mmc.c-->board_mmc_init-->cb2_mmc_initialize@cb2_mmc.c
-->mmc_register@mmc.c

fat读取：
do_fat_fsload@cmd_fat.c-->fat_register_device--file_fat_read-->do_fat_read@fat.c

fat_register_device(设置要读的设备，分区)-->开始读

arch/arm/lib/board.c
drivers/mmc/mmc.c

