______________________________________
启动命令：
uboot在RAM中运行代码。
1.将映像从媒体(以太网，USB，flash)中读入到RAM
2.跳入到RAM中映像的第一条命令

--------------------------------------
从以太网：
# tftpboot <loadAddress>下载到RAM的地址 <bootfilename>下载的文件

TFTP传输在serverip地址(服务器)和ipaddr地址(目标)之间。服务器运行TFTP服务，还有一个启动文件供下载

--------------------------------------
从USB：
USB必须是FAT文件系统
# usb reset
# fatload usb <dev>[:partition]（从usb哪个分区） <loadAddress>（写入到RAM地址） <bootfilename>

--------------------------------------
从flash：
从flash启动，不依赖外部硬件
NOR flash
# cp.[b/w/l] <sourceAddress> <loadAddress> <count>

NAND flash
# nand read <loadAddress> <sourceAddress> <count>

--------------------------------------
从RAM启动：
WinCE：# go <loadAddress>
Linux：# bootm <loadAddress>
______________________________________
使用nvram(非易失内存，EEPROM或flash)：
保存IP地址网关，分区表等信息。一般这些信息会有备份一旦损毁可以恢复。恢复可以通过命令intvram

--------------------------------------
当执行intvram时只是改变内存中的变量。在执行命令saveenv或者intnvram时U-Boot将改变写入到nvram中。
命令格式：
intnvram help|print <params>|printall|repair|reset|save|set <params>


--------------------------------------
输出，修改，保存分区表通过命令mtdparts

______________________________________
固件更新命令：
boot loader，kernel其他保存在flash中的数据组成固件。可以通过flash命令修改这些固件。
一般通过三步来修改：
1.将固件读入到内存
2.擦除flash中数据
3.将内存中数据写入到flash中
--------------------------------------
用RAM中数据更新flash：
先通过网络或USB将数据传送到RAM。
NOR flash：
#erase address +size
#cp.[b|w|l] sourceAddress targetAddress count

NAND flash：
#nand erase address size
#nand write sourceAddress targetAddress count

=====================

