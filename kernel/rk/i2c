//
======================================
i2c用户空间API接口:
适配器返回支持的i2c功能：
  static u32 i2c_xxxx_functionality(struct i2c_adapter *adap)
  {
	return I2C_FUNC_I2C | I2C_FUNC_SMBUS_EMUL |....;
  }

I2C_FUNC_SMBUS_EMUL包含了smbus的所有功能。

使用者检测适配器功能：
  static int xxxx_detect(...)
  {
	(...)
	if (!i2c_check_functionality(adapter, I2C_FUNC_SMBUS_BYTE_DATA |
				     I2C_FUNC_SMBUS_WORD_DATA))
		goto exit;
	(...)
  }

通过设备文件检测：
  int file;
  if (file = open("/dev/i2c-0", O_RDWR) < 0) {
	/* Some kind of error handling */
	exit(1);
  }
  if (ioctl(file, I2C_FUNCS, &funcs) < 0) {
	/* Some kind of error handling */
	exit(1);
  }
  if (!(funcs & I2C_FUNC_SMBUS_QUICK)) {
	/* Oops, the needed functionality (SMBus write_quick function) is
           not available! */
	exit(1);
  }

_____________________________
驱动中读写实现：
i2c_transfer(struct i2c_adapter *adap, struct i2c_msg *msgs, int num){
- 总线能够访问i2c，adap->algo->master_xfer{
	- 锁定i2c_trylock_adapter
	- adap->algo->master_xfer@i2c-core.c-->rk30_i2c_algorithm.master_xfer-->
		rk30_i2c_xfer@i2c-rk30-adapter.c
	- 释放锁i2c_unlock_adapter
	}
}@i2c-core.c

平台实现：
rk30_i2c_xfer{
- 判断时钟是否正确
- 设置频率rk30_i2c_set_clk
- 传输，rk30_i2c_doxfer-->rk30_i2c_irq-->rk30_i2c_irq_nextblock{
	- i2c处于写状态STATE_WRITE，{
		- rk30_irq_write_prepare,读取msg中数据写入寄存器I2C_TXDATA_BASE
		}
	}
- 关闭时钟
}@i2c-rk30-adapter.c

kernel/drivers/i2c/busses/i2c-rk30-adapter.c
=============================
总线设备(host)：

注册i2c总线平台设备：
rk30_init_devices-->rk30_init_i2c{
- platform_device_register(&device_i2c0) //name	= "rk30_i2c",
- ....
}@devices.c

注册i2c平台设备驱动：
subsys_initcall(i2c_adap_init)-->i2c_adap_init-->platform_driver_register(&rk30_i2c_driver){
.probe = rk30_i2c_probe,
.driver	= {
	.name	= "rk30_i2c",
	}
}@i2c-rk30.c

生成i2c总线adpater：
rk30_i2c_probe@i2c-rk30.c-->i2c_add_numbered_adapter{
- 创建设备rk30_i2c，i2c
- 生成adapter，i2c_add_rk30_adapter{
	- 设置adapter的处理函数，adap->algo = &rk29_i2c_algorithm
	- i2c_add_numbered_adapter{
		- i2c_register_adapter-->device_register
		- 探测总线上设备，i2c_scan_static_board_info
		}@i2c-core.c
	}
- 初始化设备i2c
- 设置平台设备的驱动数据为i2c
}@i2c-rk30-adapter.c

生成i2c_client(功能设备):
i2c_add_numbered_adapter-->i2c_register_adapter-->i2c_scan_static_board_info-->i2c_new_device@i2c-core.c

kernel/drivers/i2c/busses/i2c-rk30.c
kernel/arch/arm/mach-rk30/devices.c
kernel/drivers/i2c/busses/i2c-rk30-adapter.c
=============================
i2c总线上client：

加入i2c_client设备：
machine_rk30_board_init-->rk30_i2c_register_board_info{
- i2c_register_board_info(0, i2c0_info, ARRAY_SIZE(i2c0_info)){
	- 将总线上设备加入到链表，list_add_tail(&devinfo->list, &__i2c_board_list)
	}
- ....
}@board-rk3188-tb.c


创建i2c_client设备并注册：
i2c_add_numbered_adapter-->i2c_register_adapter-->i2c_scan_static_board_info(struct i2c_adapter *adapter)
{
- 遍历链表中的设备list_for_each_entry(devinfo, &__i2c_board_list, list)
	- 若设备编号与适配值编号一致，则创建i2c设备
	  i2c_new_device(adapter,&devinfo->board_info){
		- 创建i2c_client
		- 注册设备device_register(&client->dev)
	}
}@i2c-core.c



驱动注册(i2c设备的驱动)：
postcore_initcall(i2c_init)/(各个功能设备的驱动)-->i2c_add_driver-->i2c_register_driver@i2c.h
-->i2c_register_driver{
- 设置驱动总线，driver->driver.bus = &i2c_bus_type
- 注册驱动driver_register
- 遍历总线上的设备执行，i2c_for_each_dev(driver, __process_new_driver){
			- __process_new_driver-->i2c_do_add_adapter(探测适配器并加入)		
	}
}@i2c-core.c



drivers/i2c/i2c-boardinfo.c
drivers/i2c/i2c-core.c
include/linux/i2c.h
_____________________________________
i2c字符设备：
module_init(i2c_dev_init)-->i2c_dev_init-->register_chrdev(I2C_MAJOR, "i2c", &i2cdev_fops)@i2c-dev.c


i2cdev_notifier.notifier_call-->i2cdev_notifier_call-->i2cdev_attach_adapter-->
device_create(i2c_dev_class)


drivers/i2c/i2c-core.c
drivers/i2c/busses/i2c-rk30.c
drivers/i2c/busses/i2c-rk30-adapter.c
arch/arm/mach-rk30/board-rk3168-tb.c
arch/arm/mach-rk30/devices.c
include/linux/i2c.h
drivers/i2c/i2c-dev.c
