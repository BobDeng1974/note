信号格式：
第一代CVBS，第二代是S-VIDEO，第三代是VGA，第四代是DVI,第五代是HDMI
CVBS是复合视频全电视信号，同步信号和颜色亮度信号叠加在一起，

YPbPr是模拟高清分量视频信号Y是同步信号和亮度信号，PbPr是色度信号

YCbCr是数字系统的标识

格式：
主控：TTL-->LVDS-->TTL显示器

=============================
LCDC-->(框架)fb_mem-->rk_fb

=============================
lcdc平台设备初始：(px3平台只使用lcdc1)
struct rk29fb_info lcdc0_screen_info = {
	.prop	   = PRMRY,		//primary display device
	.io_init   = rk_fb_io_init,
	.io_disable = rk_fb_io_disable,
	.io_enable = rk_fb_io_enable,
	.set_screen_info = set_lcd_info,
};

static struct platform_device device_lcdc0 ={
	.name       = "rk30-lcdc",
	.dev 		= {
		.platform_data = &lcdc0_screen_info,
	},
}


lcdc平台设备注册：
machine_rk30_board_init-->rk_platform_add_display_devices{
- 初始化， lcdc0 = &device_lcdc0,//name="rk30-lcdc"
- 加入，__rk_platform_add_display_devices{
		- 注册fb设备，platform_device_register(fb)
		- 注册屏幕主控制设备，platform_device_register(prmry_lcdc)
		- 注册背光设备，platform_device_register(bl)
	}@rk_fb.h
}@board-rk3188-sdk.c


lcdc平台驱动注册：
static struct platform_driver rk3188_lcdc_driver = {
	.probe		= rk3188_lcdc_probe,
	.remove		= __devexit_p(rk3188_lcdc_remove),
	.driver		= {
		.name 	= "rk30-lcdc",
		.owner  = THIS_MODULE,
	},
	.suspend 	= rk3188_lcdc_suspend,
	.resume  	= rk3188_lcdc_resume,
	.shutdown 	= rk3188_lcdc_shutdown,
};

fs_initcall(rk3188_lcdc_module_init)-->platform_driver_register(&rk3188_lcdc_driver)@rk3188_lcdc.c

rk3188_lcdc_probe{
- 分配一个lcdc_device设备空间，devm_kzalloc
- 分配一个rk_screen设备，设置lcdc_dev->screen = screen
- 根据平台设备的资源初始化{
	- lcdc_device的基地址，寄存器...
	- lcdc_dev->driver //保存显示屏信息
	}
- 设置显示屏信息，screen_ctr_info->set_screen_info@rk3188_lcdc.c-->
	.set_screen_info = set_lcd_info@board-rkpx3-sdk.c-->
	set_lcd_info{	
	- 根据lcd.h的配置信息，设置显示屏基本信息。	
	}@rk_screen.c

- 注册fb设备，rk_fb_register(&(lcdc_dev->driver),&lcdc_driver){
	- 初始化lcdc驱动为默认驱动，init_lcdc_device_driver
	- 驱动初始化，dev_drv->init_lcdc
	- 初始化rk_fb_inf fb_inf{
		- fbi->var = def_var //默认值
		- 设置fb_inf->lcdc_dev_drv为lcdc_dev->driver
		}
	- 根据默认驱动lcdc_driver,设置lcdc_dev->driver。init_lcdc_device_driver-->
	   dev_drv->fb_layer_remap-->rk3188_fb_layer_remap{
		- 重映射fb0，fb1的层次，win0，win1
	   	}@rk3188_lcdc.c
	- 初始化lcdc，设置io口，寄存器，dev_drv->init_lcdc
	- 根据fb层次数，设置并注册fb.for{
		- 设置fb的信息，赋值fbi->var屏幕信息(从lcdc驱动中的screen中获取)，操作函数
		- 只有fb0才分配内存，rk_request_fb_buffer
		- 设置fb的编号(用于win的对应)，fix.id
		- register_framebuffer
		- 设置fb_inf->fb =fbi
		- 层次0{
			- 
			- 创建进程，kthread_run(rk_fb_wait_for_vsync_thread)
			- 初始工作队列，init_kthread_worker
			- 设置工作队列进程， kthread_run(&dev_drv->update_regs_worker)
			- 初始化工作，init_kthread_work
			}
		}
	- 
	}@rk_fb.c
}


rk_request_fb_buffer{
- 获取fb0对应资源，platform_get_resource_byname
- request_mem_region
- 映射显示地址，ioremap(res->start, fbi->fix.smem_len)
}


rk_fb_register-->dev_drv->init_lcdc@rk_fb.c-->rk3188_lcdc_init{
- 获取并初始化clk，clk_get
- 若uboot中没有显示则开始时钟，rk3188_lcdc_clk_enable
- 读取默认配置，寄存器中值，rk3188_lcdc_read_reg_defalut_cfg
- 设置电压
- 若是lcdc1设置iomux，iomux_set
- 设置完成，lcdc_cfg_done
}@rk3188_lcdc.c

arch/arm/mach-rk3188/board-rk3188-sdk.c
drivers/video/rockchip/screen/rk_screen.c
drivers/video/rockchip/lcdc/rk3188_lcdc.c
drivers/video/rockchip/rk_fb.c
____________________________
rk3188_lcdc_reg_update

____________________________
oops:
rk_fb_ioctl@rk_fb.c-->sync_fence_install(struct sync_fence *fence, int fd)-->
fd_install(fd, fence->file)@sync.c-->fd_install{
- 获取当前进程文件，current->files
- 获取描述符表，fdt = files_fdtable(files)
- fdt->fd[fd]不为空，报错
- 赋值fdt->fd[fd]=file
}@open.c

/kernel/drivers/base/sync.c
kernel/fs/open.c
=================================
rk616是多功能设备
rk616_devs[] = {
	{
		.name = "rk616-lvds",
	},
	{
		.name = "rk616-codec",
	{
		.name = "rk616-hdmi",
	},
	{
		.name = "rk616-mipi",
	},
};


rk616驱动：
rk616_module_init-->i2c_add_driver(&rk616_i2c_driver)-->rk616_i2c_driver  = {
	.driver = {
		.name  = "rk616",
	},
	.probe	= &rk616_i2c_probe,
}

rk616设备注册：
rk616_pdata@board-rkpx3-sdk.c

rk30_i2c_register_board_info-->i2c_register_board_info(i2c4_info)-->i2c4_info{
.type                   = "rk616",
}
 
探测到设备：
rk616_i2c_probe{
- 初始化设备mfd_rk616 *rk616 
- mfd_add_devices(rk616_devs，num)-->mfd_add_devices{
	- 循环加入设备，mfd_add_device{
		- 设置平台数据，platform_device_add_data
		- 设置平台资源，platform_device_add_resources
		- 注册平台设备，platform_device_add
		}
	}@mfd-core.c
}@rk616-core.c



kernel/drivers/mfd/mfd-core.c
kernel/drivers/mfd/rk616-core.c
_________________________________
lvds驱动注册：
fs_initcall(rk616_lvds_init)-->rk616_lvds_init-->platform_driver_register(&rk616_lvds_driver)-->
rk616_lvds_driver = {
	.driver		= {
		.name	= "rk616-lvds",
	},
	.probe		= rk616_lvds_probe,
}@rk616_lvds.c

rk616_lvds_probe{
- 获取屏幕参数，rk_fb_get_prmry_screen
- lvds初始化，rk616_lvds_init_cfg{
	- 配置route，rk616_display_router_cfg{
		- 设置通道(lvds,rgb,lcdc0,lcdc1...),rk616_set_router
		- rk616_router_cfg
		- rk616_scaler_cfg
		- rk616_dither_cfg		
		}@rk616-vif.c
	- 根据route初始化寄存器，rk616_lvds_cfg
	}

}@rk616_lvds.c

rk616_lvds_cfg{
- 是lvds模式
- 是rgb模式
}


kernel/drivers/mfd/rk616-core.c
kernel/drivers/video/rockchip/transmitter/rk616_lvds.c
kernel/drivers/mfd/rk616-vif.c

