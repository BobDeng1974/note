====================================
向用户空间提供的API

1. Capabilities
---------------
设备和驱动的功能可以从显示屏固定信息获取

struct fb_fix_screeninfo {
	...
	__u16 capabilities;		/* see FB_CAP_*	*/
	...
};


- FB_CAP_FOURCC

驱动支持根据FOURCC(4字符码)格式设置的API（API接收FOURCC格式参数）


2. Types and visuals
--------------------
象素存储在内存中的格式依赖硬件支持的格式。应用需要知道硬件支持的格式，然后将相应格式的图像数据写到
frame buffer内存中。
格式由帧缓冲区的类型和屏幕信息来描述.一些显示信息存储在可变屏幕信息结构体的bits_per_pixel, grayscale, red,
 green, blue 和transp 域中.
显示信息描述颜色是怎样编码和合成象素的。类型描述来象素是如何被存储在内存的。

- FB_TYPE_PACKED_PIXELS
象素连续存储在一个块，如果一个象素编码不足8位，显示信息决定象素是补齐8位，还是将象素打包成字节。

- FB_TYPE_PLANES
象素分开存储在多个块中，块数和象素的位数相同。块的顺序和象素的位数一致。块是连续存储的

- FB_TYPE_INTERLEAVED_PLANES
象素分开存储在多个块中，块数和象素的位数相同。块的顺序和象素的位数一致。但块是交错存储的，interleave参数
定义来两个相邻的块的字节中的距离（象素格几位相邻），这个参数在固定屏幕信息的type_aux域中

- FB_TYPE_FOURCC
象素存储在内存的格式，是存储在可变屏幕信息中grayscale域的FOURCC格式

- FB_VISUAL_MONO01
黑或白色象素存储在几个位中（通常是1为），位数由可变屏幕信息bpp域决定.
黑象素所有的位都置1，白象素的所有的位都置0.当象素位数小于8时，几个象素合并成一个字节
FB_VISUAL_MONO01 is 现在只和 FB_TYPE_PACKED_PIXELS 一起使用.

- FB_VISUAL_MONO10

和上面相同，只是黑白值相反。黑为0，白为1

- FB_VISUAL_TRUECOLOR
象素被分成红绿蓝，每部分都是一个颜色表的索引。不同的设备查表不尽相同。
各颜色组件根据可变屏幕信息中red, green, blue and transp域组成一个象素.

- FB_VISUAL_PSEUDOCOLOR and FB_VISUAL_STATIC_PSEUDOCOLOR
象素也是颜色表的索引对于FB_VISUAL_STATIC_PSEUDOCOLOR颜色表只读，FB_VISUAL_PSEUDOCOLOR颜色表可读写
象素的位数由可变屏幕信息bits_per_pixel决定

- FB_VISUAL_DIRECTCOLOR

象素指向可编程的颜色表.
各颜色组件根据可变屏幕信息中red, green, blue and transp域组成一个象素.

- FB_VISUAL_FOURCC

象素编码和解释是FOURCC格式，格式值存储在可变屏幕信息grayscale域中.


3. Screen information
---------------------

应用获取屏幕信息通过FBIOGET_FSCREENINFO和 FBIOGET_VSCREENINFO ioctls。这些操作返回
fb_fix_screeninfo和fb_var_screeninfo 结构体的指针

fb_fix_screeninfo 保存了关于帧缓冲区设备和当前格式的信息，都是应用不可直接改变的。
但当应用改变格式时驱动可以改变这些信息
struct fb_fix_screeninfo {
	char id[16];			/* identification string eg "TT Builtin" */
	unsigned long smem_start;	/* Start of frame buffer mem */
					/* (physical address) */
	__u32 smem_len;			/* Length of frame buffer mem */
	__u32 type;			/* see FB_TYPE_*		*/
	__u32 type_aux;			/* Interleave for interleaved Planes */
	__u32 visual;			/* see FB_VISUAL_*		*/
	__u16 xpanstep;			/* zero if no hardware panning  */
	__u16 ypanstep;			/* zero if no hardware panning  */
	__u16 ywrapstep;		/* zero if no hardware ywrap    */
	__u32 line_length;		/* length of a line in bytes    */
	unsigned long mmio_start;	/* Start of Memory Mapped I/O   */
					/* (physical address) */
	__u32 mmio_len;			/* Length of Memory Mapped I/O  */
	__u32 accel;			/* Indicate to driver which	*/
					/*  specific chip/card we have	*/
	__u16 capabilities;		/* see FB_CAP_*			*/
	__u16 reserved[2];		/* Reserved for future compatibility */
};

fb_var_screeninfo 存储了可改变信息

struct fb_var_screeninfo {
	__u32 xres;			/* visible resolution		*/
	__u32 yres;
	__u32 xres_virtual;		/* virtual resolution		*/
	__u32 yres_virtual;
	__u32 xoffset;			/* offset from virtual to visible */
	__u32 yoffset;			/* resolution			*/

	__u32 bits_per_pixel;		/* guess what			*/
	__u32 grayscale;		/* 0 = color, 1 = grayscale,	*/
					/* >1 = FOURCC			*/
	struct fb_bitfield red;		/* bitfield in fb mem if true color, */
	struct fb_bitfield green;	/* else only length is significant */
	struct fb_bitfield blue;
	struct fb_bitfield transp;	/* transparency			*/

	__u32 nonstd;			/* != 0 Non standard pixel format */

	__u32 activate;			/* see FB_ACTIVATE_*		*/

	__u32 height;			/* height of picture in mm    */
	__u32 width;			/* width of picture in mm     */

	__u32 accel_flags;		/* (OBSOLETE) see fb_info.flags */

	/* Timing: All values in pixclocks, except pixclock (of course) */
	__u32 pixclock;			/* pixel clock in ps (pico seconds) */
	__u32 left_margin;		/* time from sync to picture	*/
	__u32 right_margin;		/* time from picture to sync	*/
	__u32 upper_margin;		/* time from sync to picture	*/
	__u32 lower_margin;
	__u32 hsync_len;		/* length of horizontal sync	*/
	__u32 vsync_len;		/* length of vertical sync	*/
	__u32 sync;			/* see FB_SYNC_*		*/
	__u32 vmode;			/* see FB_VMODE_*		*/
	__u32 rotate;			/* angle we rotate counter clockwise */
	__u32 colorspace;		/* colorspace for FOURCC-based modes */
	__u32 reserved[4];		/* Reserved for future compatibility */
};

应用通过FBIOPUT_VSCREENINFO操作传入一个fb_var_screeninfo指针。如果操作成功，驱动将更相应的新固定屏幕信息。
应用通过调用FBIOGET_VSCREENINFO 操作修改它们要修改的域

4. Format configuration
-----------------------
帧缓冲区设备有两种方式设置帧缓冲区格式：以前的API，基于FOURCC的API

RGB，grayscale格式（以前非标准格式）使用以前的API

要设置格式，应用可以将fb_var_screeninfo中bits_per_pixel设置为需要的值

- For grayscale formats, applications set the grayscale field to one. The red,
  blue, green and transp fields must be set to 0 by applications and ignored by
  drivers. Drivers must fill the red, blue and green offsets to 0 and lengths
  to the bits_per_pixel value.

- For pseudocolor formats, applications set the grayscale field to zero. The
  red, blue, green and transp fields must be set to 0 by applications and
  ignored by drivers. Drivers must fill the red, blue and green offsets to 0
  and lengths to the bits_per_pixel value.

- For truecolor and directcolor formats, applications set the grayscale field
  to zero, and the red, blue, green and transp fields to describe the layout of
  color components in memory.

struct fb_bitfield {
	__u32 offset;			/* beginning of bitfield	*/
	__u32 length;			/* length of bitfield		*/
	__u32 msb_right;		/* != 0 : Most significant bit is */
					/* right */
};
  象素的值的位数为bits_per_pixel。RGB和alpha的位数由fb_bitfield偏移和长度域决定。
  偏移值从左开始计算。	

  象素通常存储在整数个字节中。如果象素的位数不是8位的倍数，象素的位数将被填充为8的倍数



成功设置格式配置值后，驱动将根据配置更新fb_fix_screeninfo

以FOURCC为基础的API，是唯一可支持YUV格式的API。驱动如果支持FOURCC类型的API，fb_fix_screeninfo中
FB_CAP_FOURCC将被置位。


To select a format, applications set the grayscale field to the desired FOURCC.
For YUV formats, they should also select the appropriate colorspace by setting
the colorspace field to one of the colorspaces listed in linux/videodev2.h and
documented in Documentation/DocBook/v4l/colorspaces.xml.

The red, green, blue and transp fields are not used with the FOURCC-based API.
For forward compatibility reasons applications must zero those fields, and
drivers must ignore them. Values other than 0 may get a meaning in future
extensions.

Upon successful format configuration, drivers update the fb_fix_screeninfo
type, visual and line_length fields depending on the selected format. The type
and visual fields are set to FB_TYPE_FOURCC and FB_VISUAL_FOURCC respectively.
