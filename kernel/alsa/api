//user space 
pcm_open(card,device,flags,config){
- 创建struct pcm，打开"/dev/snd/pcmC%uD%u%c"
- 获取snd_pcm_info,ioctl(SNDRV_PCM_IOCTL_INFO)
- 初始化并设置hw参数{// struct snd_pcm_hw_params params
	- param_init(&params)
	- 设置采样率，格式，声道数，period size,period count
	- 设置ioctl( SNDRV_PCM_IOCTL_HW_PARAMS, &params)
	}
- 获取kernel适配的period_size，period_count。计算buffer
- mmap_buffer=mmap(pcm->fd)
- 设置software参数{
	- ioctl(pcm->fd, SNDRV_PCM_IOCTL_SW_PARAMS)
	}
- pcm_hw_mmap_status
}



snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_HW_PARAMS)-->snd_pcm_common_ioctl1
-->snd_pcm_hw_params_user-->snd_pcm_hw_params{
- 调整参数，snd_pcm_hw_refine
- 设置substream->runtime{
	- format
	- channel
	- rate //采样率
	- period_size，periods,buffer_size
	}
}@pcm_navite.c



//read





//write


android/external/tinyalsa/pcm.c
kernel/sound/cor/pcm_native.c
=============
kernel:


确认runtime的buffer，frame
runtime->buffer_size - runtime->control->appl_ptr % runtime->buffer_size


appl_ptr = runtime->control->appl_ptr //指针
appl_ofs = appl_ptr % runtime->buffer_size //偏移

//reset
snd_pcm_f_ops.unlocked_ioctl-->snd_pcm_playback_ioctl/snd_pcm_capture_ioctl-->
snd_pcm_playback_ioctl1/snd_pcm_capture_ioctl1-->snd_pcm_common_ioctl1(SNDRV_PCM_IOCTL_RESET)
-->snd_pcm_reset-->snd_pcm_action_nonatomic-->snd_pcm_action_reset@pcm_native.c


//read
snd_pcm_capture_ioctl1-->
snd_pcm_lib_read1(buffer,frames,snd_pcm_lib_read_transfer){
- snd_pcm_update_hw_ptr
- snd_pcm_capture_avail{ //获取有效数据

	}
- 若当前没有数据则等待，wait_for_avail{
	- add_wait_queue(&runtime->tsleep, &wait) //初始化并设置可中断等待
	- schedule_timeout(wait_time)
	}
- tarnsfer-->
  snd_pcm_lib_read_transfer(stream,hwoff/*dma的偏移*/,buffer,offset/*已经读取的frames*/，frames/*本次需读取的frame*/){
	- 根据buffer和offset，计算目标保存地址位置
	- 若stream又copy函数，substream->ops->copy
	- 没有copy函数{
		- 计算源地址的位置，runtime->dma_area + frames_to_bytes(runtime, hwoff)
		- unalign_copy_to_user
		}
	}
}@pcm_lib.c



