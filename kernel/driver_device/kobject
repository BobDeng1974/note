//kobject 像所有内核设备驱动的父类..在sys中一个目录
struct kobject {
	const char		*name;
	struct list_head	entry;
	struct kobject		*parent;
	struct kset		*kset;
	struct kobj_type	*ktype;
}

通常kobjects都是嵌入到其他结构中(继承),当知道kojbect指针，通过container_of(pointer, type, member)获取容器指针。


void kobject_init(struct kobject *kobj, struct kobj_type *ktype);//初始化kobjcects：
int kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...);//注册到sysfs
int kobject_rename(struct kobject *kobj, const char *new_name);//add之后更改名字必须通过函数：
const char *kobject_name(const struct kobject * kobj);//获取名字：
int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype,
                          struct kobject *parent, const char *fmt, ...);//同时初始化，加入到sysfs：

struct kobject *kobject_create_and_add(const char *name, struct kobject *parent)


//kobj_type
struct kobj_type {
	void (*release)(struct kobject *kobj);
	const struct sysfs_ops *sysfs_ops;
	struct attribute **default_attrs;
	const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
	const void *(*namespace)(struct kobject *kobj);
}




//ksets：
struct kset {
	struct list_head list;
	spinlock_t list_lock;
	struct kobject kobj;
	const struct kset_uevent_ops *uevent_ops;
}

void kset_init(struct kset *kset);
int __must_check kset_register(struct kset *kset);
void kset_unregister(struct kset *kset);
struct kset * __must_check kset_create_and_add(const char *name,
						const struct kset_uevent_ops *u,
						struct kobject *parent_kobj);

如果kset要控制kobject的uevent操作，可以通过kset_uevent_ops来处理：
struct kset_uevent_ops {
        int (*filter)(struct kset *kset, struct kobject *kobj);
        const char *(*name)(struct kset *kset, struct kobject *kobj);
        int (*uevent)(struct kset *kset, struct kobject *kobj,
                      struct kobj_uevent_env *env);
};
filter判断事件是否不被传送到用户空间
name函数用来改变uevent传送的kset的默认名。(uevent中有kset的名字，会被传送到用户空间？)
uevent函数在事件传送用户空间时调用，用来在uevent中加入环境变量。


//创建sysfs文件
int sysfs_create_file(struct kobject *kobj, struct attribute *attr);
int sysfs_remove_file(struct kobject *kobj, struct attribute *attr);

sysfs_create_file@sysfs.h-->sysfs_create_file_ns-->sysfs_add_file_mode_ns-->
__kernfs_create_file@file.c

//sysfs链接
int __must_check sysfs_create_link(struct kobject *kobj, struct kobject *target,
				   const char *name);

========================
//uevent:
当是移除操作时，kobject核心会自动产生相应的事件(无需手动),通知用户空间

enum kobject_action {
	KOBJ_ADD,
	KOBJ_REMOVE,
	KOBJ_CHANGE,
	KOBJ_MOVE,
	KOBJ_ONLINE,
	KOBJ_OFFLINE,
	KOBJ_MAX
}

int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...)//加入属性

kobject_uevent(struct kobject *kobj, enum kobject_action action)-->kobject_uevent_env(envp_ext){
- kset = top_kobj->kset; //获取kset 获取uevent_ops执行操作
- uevent_ops = kset->uevent_ops;
- uevent_ops->filter(kset, kobj)
- event_ops->name
- env = kzalloc(sizeof(struct kobj_uevent_env), GFP_KERNEL)//设置环境变量
- add_uevent_var(env, "ACTION=%s", action_string)...   
- uevent_ops->uevent(kset, kobj, env) //设置设备的自定义环境变量
- dd_uevent_var(env, "%s", envp_ext[i]) //设置传入的参数环境变量
- etlink_broadcast_filtered  //发送到用户空间
}@kobject_uevent.c



kernel/lib/kobject_uevent.c
kernel/lib/kobject.c
kernel/include/linux/sysfs.h

