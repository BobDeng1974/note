//平台设备：
总线：
platform_bus_type = {
	.name		= "platform",
	.match		= platform_match,
};
platform_match{
- 匹配表of_match_table
- 若驱动中有id_table，匹配id_table
- 最后匹配名字
}

平台设备：
platform_device_register{
- 初始化，device_initialize(&pdev->dev){

	}
- 加入设备，platform_device_add{
	- 设置设备名为平台设备名，dev_set_name
	- 设置资源名...
	- device_add
	}
}

平台设备驱动：
platform_driver_register{
- 设置probe，remove，shutdown回调
- 注册driver_register
}



kernel/drivers/base/platform.c

struct platform_driver {
	int (*probe)(struct platform_device *);
	int (*remove)(struct platform_device *);
	void (*shutdown)(struct platform_device *);
	int (*suspend)(struct platform_device *, pm_message_t state);
	int (*resume)(struct platform_device *);
	struct device_driver driver;
	const struct platform_device_id *id_table;
	bool prevent_deferred_probe;
};


