==================================
ActivityManagerService相关调用@SystemServer.java
ActivityManagerService.main()
...
ActivityManagerService.setSystemProcess()
...
ActivityManagerService.installSystemProviders()
______________
main运行流程：
ActivityManagerService.main()@SystemServer.java-->main-->
main(){
new AThread();//开始一个线程后，等待系统准备。线程中实例化ActivityManagerService。
.....
ActivityThread.systemMain()//服务实例化后,thread.attach(若是系统线程，创建context，instrument，app)
.....
m.mMainStack = new ActivityStack(m, context, true)//
}-->startRunning(指定第一个运行的apk)-->systemReady@ActivityManagerService.java


将activity服务加入系统：
ActivityManagerService.setSystemProcess@SystemServer.java-->setSystemProcess@ActivityManagerService
-->ServiceManager.addService（向ServiceManager添加服务，添加的进程也是SystemServer中，所以接收也是
SystemServer的进程）

______________
使用activity服务：

---获得一个ActivityManagerProxy代理
【getDefault--gDefault.get--[gDefault-- asInterface(ServiceManager.getService("activity"))--
ActivityManagerProxy(传入binder,mRemote=binder)--am]--am.get@ActivityManagerNative,
获得一个实例ActivityManagerProxy(IBinder(activity服务)】
---通过代理的Remote进行IPC调用activity服务




==================================
开始activity，绑定服务
开始activity：startActivity

__________________________________
选择启动的activity：
startActivityMayWait-->resolveActivity@ActivityStack.java-->resolveIntent-->
chooseBestActivity(查找合适的app，没有找到则返回选择对话框)-->findPreferredActivity
(查找以前选择过的app)@PackageManagerService.java

创建选择框：
onCreate-->(创建选择框)getLayoutInflater().inflate(R.layout.resolver_grid, null)--
(创建按钮)buttonLayout.findViewById(R.id.button_always)@ResolverActivity.java
mResolveInfo.activityInfo = mResolveActivity@PackageManagerService.java


选择：设置事件监听器()
onButtonClick-->startSelected-->onIntentSelected-->getPackageManager().
addPreferredActivity@ResolverActivity.java-->addPreferredActivity(将偏好保存)
@PackageManagerService.java


frameworks/base/core/java/android/content/pm/PackageManager.java
frameworks/base/core/java/android/content/Intent.java
frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
frameworks/base/core/java/com/android/internal/app/ResolverActivity.java
__________________________________
绑定服务：bindService

mServicesByNamePerUser保存服务

bindService-->AppGlobals.getPackageManager().resolveService@AcitvityManagerService.java-->
ServiceLookupResult（ServiceRecord，null)

AppBindRecord

ConnectionRecord

AppGlobals类提供一些静态方法获取App所需的信息
frameworks/base/core/java/android/app/AppGlobals.java

frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
==================================
创建进程：
startProcessLocked@ActivityManagerService.java-->start-->startViaZygote@Process.java


setSystemProcess

==================================
广播注册：
在AndroidManifest.xml中<receiver>
registerReceiver-->registerReceiverInternal-->mPackageInfo.getReceiverDispatcher--
ActivityManagerNative.getDefault().registerReceiver@ContextImpl-->

发送：
sendBroadcast-->ActivityManagerNative.getDefault().broadcastIntent@ContextImpl.java-->
broadcastIntentLocked(默认广播不会发送到stoped状态的应用,判断函数Intent.isExcludingStopped)
@ActivityManagerService.java

查找app中receiver：
List receiver //resolveInfo类型
List<BroadcastFilter> registeredReceivers //动态注册的接收器，进程已开始可以直接执行

broadcastIntentLocked-->AppGlobals.getPackageManager().queryIntentReceivers@ActivityManagerService.java
-->queryIntentReceivers-->mReceivers.queryIntentForPackage-->ActivityIntentResolver.queryIntentForPackage
@PackageManagerService.java-->queryIntentFromList-->buildResolveList@IntentResolver.java

查找其他receiver：
broadcastIntentLocked(默认广播不会发送到stoped状态的应用)-->mReceiverResolver.queryIntent
@ActivityManagerService.java-->queryIntent-->buildResolveList(判断是否跳过)@IntentResolver.java
--(将符合广播接收的接收者加入一个链表，将连变加入一个执行队列)
_________________________
ActivityManagerService中创建两个广播队列：
        mFgBroadcastQueue = new BroadcastQueue(this, "foreground", BROADCAST_FG_TIMEOUT);
        mBgBroadcastQueue = new BroadcastQueue(this, "background", BROADCAST_BG_TIMEOUT);

-------------------------
将广播加入队列不同的类型的广播链表中mParallelBroadcasts(无序)，mOrderedBroadcasts(有序广播)：
无序广播队列(动态注册的非有序广播)：
enqueueParallelBroadcastLocked(当是无序的，且是注册的广播则加入该队列)-->mParallelBroadcasts.add
(加入到ArrayList中)@BroadcastQueue.java

有序广播队列(有序广播和非动态注册的广播)：
enqueueOrderedBroadcastLocked(如果不是动态注册的，或是有序广播则加入该队列)-->
mOrderedBroadcasts.add@BroadcastQueue.java

-------------------------
处理广播：
queue.scheduleBroadcastsLocked@ActivityManagerService.java-->scheduleBroadcastsLocked-->
mHandler.sendMessage(发送广播)-->Handler.handleMessage(BROADCAST_INTENT_MSG)-->
processNextBroadcast@BroadcastQueue.java

首先处理无序广播队列：(都是动态注册的可快速处理)
processNextBroadcast(处理所有receiver)-->deliverToRegisteredReceiverLocked-->performReceiveLocked-->
(包含receiver的应用，进程已开始)app.thread.scheduleRegisteredReceiver@BroadcastQueue.java-->
ApplicationThreadNative.scheduleRegisteredReceiver@ApplicationThreadNative.java-->
ApplicationThread.scheduleRegisteredReceiver-->receiver.performReceive@ActivityThread.java-->
InnerReceiver.performReceive-->ReceiverDispatcher.performReceive-->Args.run@LoadedApk.java
-->receiver.onReceive--PendingResult.finish@BroadcastReceiver.java

处理有序广播(手动注册的接收器，进程已开始)：
processNextBroadcast-->deliverToRegisteredReceiverLocked-->performReceiveLocked-->
(包含receiver的应用，进程已开始)app.thread.scheduleRegisteredReceiver@BroadcastQueue.java

处理有序广播(可能要初始化处理进程，进程没开始):
processNextBroadcast-->processCurBroadcastLocked-->app.thread.scheduleReceiver@BroadcastQueue.java-->
(跨进程)scheduleReceiver-->queueOrSendMessage(H.RECEIVER)-->H.handleMessage(RECEIVER)-->handleReceiver
-->receiver.onReceive(执行广播处理)--data.finish(调用结束处理函数)@ActivityThread.java

-------------------------
finish-->sendFinished--> am.finishReceiver@BroadcastReceiver.java-->finishReceiver-->
r.queue.processNextBroadcast@ActivityManagerService.java-->processNextBroadcast@BroadcastQueue.java

处理<receiver>标签：
ReceiverDispatcher-->new InnerReceiver@LoadedApk.java

frameworks/base/services/java/com/android/server/am/ActivityManagerService.java
frameworks/base/services/java/com/android/server/am/BroadcastQueue.java
frameworks/base/core/java/android/app/ActivityThread.java
frameworks/base/core/java/android/app/LoadedApk.java


-------------------------
processNextBroadcast-->processCurBroadcastLocked-->app.thread.scheduleReceiver@BroadcastQueue.java-->()scheduleReceiver-->queueOrSendMessage(H.RECEIVER)-->H.handleMessage(RECEIVER)-->handleReceiver@ActivityThread.java
_________________________________
发送启动完成广播：
activityIdleInternal-->mService.finishBooting@ActivityStack.java-->finishBooting
(发送广播，设置dev.bootcomplete sys.bootcomplete)@ActivityManagerService.java

(打开显示)activityIdleInternal-->mService.enableScreenAfterBoot@ActivityStack.java

ensureBootCompleted-->finishBooting(发送广播，设置dev.bootcomplete sys.bootcomplete)
@ActivityManagerService.java



activityIdleInternal@ActivityStack.java-->finishBooting@ActivityManagerService.java
attach(应用进程开始，关联到应用)-->mgr.attachApplication@ActivityThread.java-->ActivityManagerProxy.attachApplication@ActivityManagerNative.java-->(跨进程)
attachApplication(关联应用进程与进程号)-->attachApplicationLocked-->sendPendingBroadcastsLocked
-->queue.sendPendingBroadcastsLocked@ActivityManagerService.java-->sendPendingBroadcastsLocked
-->processCurBroadcastLocked@BroadcastQueue.java

==================================
ActivityStack:
main-->mMainStack= new ActivityStack(m, context, true)@ActivityManagerService.java

(ArrayList类型)mHistory,用来存放运行的activity（按顺序存放）

startActivityMayWait(封装一个新的intent，HeavyWeightSwitcherActivity)-->startActivityLocked-->startActivityUncheckedLocked
--> startActivityLocked(ActivityRecord r, boolean newTask,boolean doResume, boolean keepCurTransition, Bundle options)
@ActivityStack.java-->

__________________________________
task相关:activity的task信息保存在ActivityRecord中

当intent中包括LAUNCH_SINGLE_TASK或LAUNCH_SINGLE_INSTANCE。先查找stack中是否有
已启动的activity，若有将该activity放到前台，否则启动一个新activity。

==================================
强制关闭：
forceStopPackage(final String packageName)-->forceStopPackageLocked(发送广播ACTION_PACKAGE_RESTARTED)


forceStopPackageLocked-->killPackageProcessesLocked-->removeProcessLocked(杀死进程，force stop)
@ActivityManagerService.java

forceStopPackageLocked@ActivityManagerService.java-->finishActivityLocked-->finishActivityLocked
-->finishCurrentActivityLocked@ActivityStack.java

frameworks/base/core/java/android/app/ActivityManagerNative.java
BroadcastRecorder中获取receivers，
r.receivers
receivers中获取BroadcastFilter

==================================
输入响应超时：anr
InputDispatcher::handleTargetsNotReadyLocked-->onANRLocked-->postCommandLocked(& InputDispatcher::doNotifyANRLockedInterruptible)-->doNotifyANRLockedInterruptible-->
mPolicy->notifyANR@InputDispatcher.cpp-->NativeInputManager::notifyANR-->
env->CallLongMethod(notifyANR)@com_androd_server_input_inputManagerService.cpp-->
notifyANR-->appWindowToken.appToken.keyDispatchingTimedOut@InpoutMonitor.java-->
keyDispatchingTimedOut-->service.appNotResponding@ActivityRecord.java-->
appNotResponding@ActivityManagerService.java


==================================
进程killed通知：
attachApplicationLocked{
- 
- 创建死亡处理类，new AppDeathRecipient
- 管理死亡处理类，thread.asBinder().linkToDeath
}@ActivityManagerService.java

进程killed处理:
AppDeathRecipient.binderDied-->
appDiedLocked-->handleAppDiedLocked@ActivityManagerService.java

removeProcessLocked-->handleAppDiedLocked@ActivityManagerService.java
__________________________________
程序crashed:
dvmDetachCurrentThread-->threadExitUncaughtException-->dvmCallMethod(..uncaughtHandler...)
@Thread.cpp-->Thread.getDefaultUncaughtExceptionHandler().uncaughtException
@RemoteViewsService.java-->UncaughtHandler.uncaughtException-->ActivityManagerNative.getDefault().
handleApplicationCrash@RuntimeInit.java-->handleApplicationCrash-->crashApplication@ActivityManagerService.java

日志中调用：
wtf(String tag, String msg, Throwable tr)-->
sWtfHandler.onTerribleFailure-->RuntimeInit.wtf@Log.java
wtf-->ActivityManagerNative.getDefault().handleApplicationWtf@RuntimeInit.java

crashApplication{

- 发送弹框消息，mHandler.sendMessage(SHOW_ERROR_MSG)-->H.handleMessage(SHOW_ERROR_MSG)
}@ActivityManagerService.java


dalvik/vm/Thread.cpp
frameworks/base/core/java/android/widget/RemoteViewsService.java
frameworks/base/core/java/com/android/internal/os/RuntimeInit.java
frameworks/base/services/java/com/android/server/am/AppErrorDialog.java
frameworks/base/core/java/android/util/Log.java

设置默认异常捕获(ACRA工作方式)：
mDfltExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
Thread.setDefaultUncaughtExceptionHandler(this);

