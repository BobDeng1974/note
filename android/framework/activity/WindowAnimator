WindowManagerService-->new WindowAnimator@WindowManagerService


updateWindowsAndWallpaperLocked{
- 
- 准备好显示READY_TO_SHOW，winAnimator.performShowLocked()
- 
}
frameworks/base/services/java/com/android/server/wm/WindowAnimator.java

handleAppTransitionReadyLocked@WindowManagerService.java-->showAllWindowsLocked{
- 遍历应用窗口标记中的所有窗口，mAppToken.allAppWindows.get(i).mWinAnimator
- 并显示，winAnimator.performShowLocked
}
frameworks/base/services/java/com/android/server/wm/AppWindowAnimator.java


====================================
窗口的绘制状态：

布局是创建：
createSurfaceLocked{
- mDrawState = DRAW_PENDING
- 获取surface长宽等属性
- 创建surface，new Surface
- 根据获取值，设置mSurface的属性
}

View绘制完成时调用：
finishDrawingLocked{
- 若mDrawState状态为DRAW_PENDING，则更新状态为COMMIT_DRAW_PENDING，发挥true
- 否则返回false
}

准备绘制：
commitFinishDrawingLocked{
- 状态mDrawState != COMMIT_DRAW_PENDING ，则返回
- 设置状态，mDrawState = READY_TO_SHOW;
- 窗口不为应用窗口，或窗口已经绘制，或是应用窗口正在开始，则performShowLocked
}

设置已经绘制，状态HAS_DRAWN：
performShowLocked{
- 准备好显示READY_TO_SHOW， {
	- 屏幕没打开则打开屏幕，mService.enableScreenIfNeededLocked
	- 设置进入动画，applyEnterAnimationLocked{
		- 若mEnterAnimationPending为true设置TRANSIT_ENTER，否则TRANSIT_SHOW	
		- 获取动画类型并设置，applyAnimationLocked{
			- 获取对应类型动画，mService.loadAnimation
			- 设置动画，setAnimation(a)
		}
		- 设置状态mDrawState = HAS_DRAWN
		- 执行动画，mService.scheduleAnimationLocked
		- 遍历子窗口，执行performShowLocked
		- 若窗口类型不是开始窗口TYPE_APPLICATION_STARTING，则发送消息关闭开始窗口
			mService.mH.sendEmptyMessage(H.FINISHED_STARTING)
	}
	}
}
frameworks/base/services/java/com/android/server/wm/WindowStateAnimator.java
