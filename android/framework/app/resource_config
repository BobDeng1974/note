//.mk文件中配置资源
PRODUCT_AAPT_CONFIG := hdpi xhdpi normal
PRODUCT_AAPT_PREF_CONFIG := xhdpi

ldpi
mdpi  //density 160
hdpi
===================
//创建
ContextImpl{
- mResourcesManager = ResourcesManager.getInstance()
- compatInfo = packageInfo.getCompatibilityInfo()
- resources = packageInfo.getResources(mainThread)-->getResources@LoadedApk.java
	-->mainThread.getTopLevelResources@ActivityThread.java-->mResourcesManager.getTopLevelResources
- mContentResolver = new ApplicationContentResolver
}@ContextImpl.java

getTopLevelResource(resDir,overlayDirs,libDir){
- assets = new AssetManager
- assets.addAssetPath(resDir)//设置资源路径
- dm = getDisplayMetricsLocked(DEFAULT_DISPLAY){
- new Resources(assets,DisplayMetrics,config){
	- mAssets = assets
	- updateConfiguration(config, DisplayMetrics){
		- mAssets.setConfiguration(orientation,width, height,smallestScreenWidthDp)//设置资源的配置
		}
	}@Resource.java
}@ResourcesManager.java
-->AssetManager-->ensureSystemAssets-->init(true/*系统资源*/)@AssetManager.java
-->android_content_AssetManager_init@android_util_AssetManager.cpp-->
addDefaultAssets-->addAssetPath("/system/framework/framework-res.apk")-->
mAssetPaths.add@AssetManager.cpp

//display信息：
getDisplayMetricsLocked(DEFAULT_DISPLAY){
- DisplayManagerGlobal dm = DisplayManagerGlobal.getInstance
- dm.getCompatibleDisplay{
	- displayInfo = getDisplayInfo
	- return new Display(displayInfo)
	}
}@DisplayManagerGlobal.java

//应用更新配置configuration
updateConfigurationLocked(Configuration values){
- mSystemThread.applyConfigurationToResources
- 遍历mLruProcesses{//遍历最近进程,更新资源
- ProcessRecord app = mLruProcesses.get(i)
- app.thread.scheduleConfigurationChanged(Configuration)-->
	handleConfigurationChanged@ActivityThread.java--applyConfigurationToResourcesLocked(config)
	}
- mWindowManager.setNewConfiguration //更新窗口配置
}@ActivityManagerService.java

applyConfigurationToResourcesLocked{
- Resources.updateSystemConfiguration
- 遍历mActiveResources{
	- Resources r = mActiveResources.valueAt(i).get()
	- r.updateConfiguration-->updateConfiguration-->mAssets.setConfiguration
	}@Resource.java
}ResourcesManager.java


//获取值
getDimensionPixelSize-->getValue-->mAssets.getResourceValue@Resource.java
-->loadResourceValue@AssetManager.java-->android_content_AssetManager_loadResourceValue
-->res.getResource

//查找对应id的View：
findViewById-->getWindow().findViewById(id)@Activity.java-->findViewById-->
getDecorView().findViewById@Window.java-->mDecor.findViewById-->DecorView.findViewById
@PhoneWindow.java-->findViewById-->findViewTraversal(id匹配说明查找到)@View.java-->
(是ViewGroup容器)findViewTraversal-->v.findViewById(找到对应id的View)@ViewGroup.java-->findViewById
-->findViewTraversal(return this)@View.java



//===============Assert
AssetManager{
- init(false) //应用资源
- ensureSystemAssets-->init(true)//系统资源
}

init{

}




frameworks/base/core/java/android/app/ContextImpl.java
frameworks/base/core/java/android/app/ResourcesManager.java
frameworks/base/core/java/android/app/LoadedApk.java
frameworks/base/core/java/android/hardware/display/DisplayManagerGlobal.java
frameworks/base/core/java/android/content/res/Resources.java
frameworks/base/core/java/android/content/res/AssetManager.java
frameworks/base/core/jni/android_util_AssetManager.cpp
frameworks/base/libs/androidfw/AssetManager.cpp
==================




//设置displayInfo中appWidth
computeScreenConfigurationLocked-->mPolicy.getNonDecorDisplayWidth@WindowManagerService.java
-->getNonDecorDisplayWidth(设置应用的窗口大小)@PhoneWindowManager.java

//display
DisplayManager.getDisplay(设置mDefaultDisplay)-->WindowManagerImpl(mDefaultDisplay)

getDisplay-->getOrCreateDisplayLocked@DisplayManager.java-->getCompatibleDisplay

getMetrics@Display.java-->getAppMetrics



