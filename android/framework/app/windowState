setContentView-->installDecor-->generateLayout(设置窗口布局)@PhoneWindow.java


====================================
获取显示屏信息：
displayReady-->wm.getDefaultDisplay@WindowManagerService.java-->new Display(Display.DEFAULT_DISPLAY, null)
@WindowManagerImpl.java-->init@Display.java-->android_view_Display_init-->SurfaceComposerClient::getDisplayInfo
@android_view_Display.cpp-->getDisplayInfo-->get_cblk-->ComposerService::getControlBlock-->
ComposerService::getInstance().mServerCblk@SurfaceComposerClient.cpp


frameworks/base/core/jni/android_view_Display.cpp
frameworks/native/libs/gui/SurfaceComposerClient.cpp
====================================
windowState:

创建WindowState:
addWindow-->new WindowState@WindowManagerService.java-->WindowState(初始化基本层次，设置应用端的窗口)
@WindowState.java


创建surface：
performTraversals-->relayoutWindow-->sWindowSession.relayout@ViewRootImpl.java-->
relayout-->mService.relayoutWindow@Session.java-->relayoutWindow{
-从windowState中获取mWinAnimator，创建surface
}-->winAnimator.createSurfaceLocked@WindowManagerService.java-->createSurfaceLocked@WindowStateAnimator.java


frameworks/base/services/java/com/android/server/wm/WindowStateAnimator.java
_____________________________________
重新布局：
performTraversals-->relayoutWindow-->sWindowSession.relayout@ViewRootImpl.java-->relayout-->
mService.relayoutWindow@Session.java-->relayoutWindow-->(设置请求的窗口大小)win.mRequestedWidth
 = requestedWidth@WindowManagerService.java

计算窗口大小：
computeFrameLw{
- 设置了缩放标识，则根据LayoutParams中值设置窗口长宽。否则根据请求(测量的值)值设置长宽
- 根据在容器中偏移位置，大小，计算窗口帧大小。Gravity.apply(判断在容器中靠哪个边，设置frame坐标)
- 根据显示器大小，调整帧。Gravity.applyDisplay(根据gravity属性，若帧超出显示器大小，是裁剪，还是根据差值调整)
- 根据内容容器，可视容器调整帧大小，使帧位于这些容器之中不会超出
- 计算inset，mContentInsets(状态条遮挡部分)，mVisibleInsets(能显示的inset)
- 设置mCompatFrame,(最终被应用使用)
}


Z轴位置：
setInputMethodAnimLayerAdjustment

______________________________________
移动task时移动窗口：
moveTaskToBackLocked-->mService.mWindowManager.moveAppTokensToBottom@ActivityStack.java
-->moveAppTokensToBottom@WindowManagerService.java


======================================
动画：
int mNextAppTransition  //应用要进行切换的情形。窗口打开，关闭
int mNextAppTransitionType //
final ArrayList<AppWindowToken> mOpeningApps //转换后被显示的应用列表
final ArrayList<AppWindowToken> mClosingApps //转换后被隐藏的应用列表


prepareAppTransition{
-设置转换情形mNextAppTransition值
}

executeAppTransition{
-performLayoutAndPlaceSurfacesLocked
}

======================================
运行：
WMThread.run
