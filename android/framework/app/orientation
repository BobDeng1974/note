窗口方位：
updateOrientationFromAppTokensLocked

resumeRotationLocked

updateRotationUnchecked

performLayoutAndPlaceSurfacesLockedInner

stopFreezingDisplayLocked-->


updateRotationUncheckedLocked-->mPolicy.rotationForOrientationLw@WindowManagerService.java
-->rotationForOrientationLw(根据传感器或模式，选择合适的方位)@PhoneWindowManger.java

判断是否满足请求：
updateRotationUncheckedLocked-->mPolicy.rotationHasCompatibleMetricsLw@WindowManagerService.java-->
rotationHasCompatibleMetricsLw(判断请求的方位是否与返回的方位一致)@PhoneWindowManger.java
若不满足请求的方位(说明应用的请求方位，与实际方位高宽相反)，则将实际的方位的高宽变换以满足应用。


updateRotationUncheckedLocked-->mPolicy.setRotationLw(设置新方向)

sendNewConfiguration-->mActivityManager.updateConfiguration@WindowManagerService.java-->
updateConfiguration-->updateConfigurationLocked@ActivityManagerService.java

_____________________________
设置activity方位：
setRequestedOrientation-->ActivityManagerNative.getDefault().setRequestedOrientation@Activity.java
setRequestedOrientation-->mWindowManager.setAppOrientation@ActivityManagerService.java-->
setAppOrientation(设置activity对应窗口的方位)@WindowManagerService.java--(设置值后，更新服务中方位)
mWindowManager.updateOrientationFromAppTokens(接下)@ActivityManagerService.java

根据应用的方位值更新方位：
updateOrientationFromAppTokens-->(判断方位是否与前面的值不同，若是则产生新的config文件)
updateOrientationFromAppTokensLocked(Configuration, IBinder)-->
updateOrientationFromAppTokensLocked(首先从非应用窗口获取方位，如果没有获取到则从应用窗口中获取方位)
-->computeForcedAppOrientationLocked--updateRotationUncheckedLocked(根据新的方位值，更新配置)
@WindowManagerService.java

realStartActivityLocked-->mService.mWindowManager.updateOrientationFromAppTokens@ActivityStack.java


animate-->mService.bulkSetParameters-->
bulkSetParameters-->mH.sendMessage(BULK_UPDATE_PARAMETERS)-->
H.handleMessage(BULK_UPDATE_PARAMETERS)-->mInnerFields.mUpdateRotation= true


==============================
方向变更布局：
computeScreenConfigurationLocked


