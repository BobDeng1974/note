==============================
 SurfaceFlinger 继承:
        public BinderService<SurfaceFlinger>,
        public BnSurfaceComposer,
        public IBinder::DeathRecipient,
        protected Thread
——————————————————————————————
weakReference ,strongReference：
RefBase
↳Thread
------------------------------
构造流程：
RefBase::RefBase()-->mRefs(new weakref_impl(this))-->weakref_impl(RefBase* base){ 
 mStrong(INITIAL_STRONG_VALUE),//强引用计数，设置为初始值
 mWeak(0),                     //弱引用计数
 mBase(base),                  //设置为该类的引用
 mFlags(0)
}

RefBase::~RefBase()析构函数：不是强引用或不是弱引用计数为0，删除mRefs(是一个weakref_impl)

子类可以通过覆盖onFirstRef()，onLastStrongRef执行初始化和析构的处理
------------------------------
weakref_impl类：
class RefBase::weakref_impl : public RefBase::weakref_type
------------------------------
sp<T>构造方法中调用：弱引用，强引用都增加
sp()@StrongPointer.h-->incStrong-->refs->incWeak(mWeak增加)--android_atomic_inc(&refs->mStrong)--><如果是第一次执行>-->
android_atomic_add(-INITIAL_STRONG_VALUE, &refs->mStrong)-- refs->mBase->onFirstRef()@RefBase.cpp


赋值操作符的重载：
operator = (<T> value)-->(不同的类型会有强制转换过程)value->incStrong(this)@StrongPointer.h-->
incStrong-->refs->mBase->onFirstRef(执行第一次被引用的处理函数，可重写改方法)@RefBase.cpp

析构函数：
～sp()@StrongPointer.h-->decStrong--> android_atomic_dec(&refs->mStrong)--refs->decWeak(id)-->
------------------------------
wp<T>::wp(const wp<U>& other)-->m_refs->incWeak(this)-->android_atomic_inc(&impl->mWeak)
增加弱引用计数

jb/frameworks/native/libs/utils/RefBase.cpp
jb/frameworks/native/include/utils/RefBase.h
jb/frameworks/native/include/utils/StrongPointer.h
