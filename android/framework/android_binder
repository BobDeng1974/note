//AIDL文件
/jb/out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/src
//======================================service:

service像其他应用的对象一样，也运行在主进程中。也就是在进行耗时操作时，service应该运行在自己的线程中（另生成一个线程）。
IntentService 已经实现了在另一个线程中工作。

服务的两种方式：Started(服务要自己停止)，Bound（服务在最后一个客户unbind后销毁）
如：一个Activity调用Context.startService(Intent service),
如：组件调用bindService (Intent service, ServiceConnection conn, int flags)这种方式下，一旦组件绑定到，
服务就开始运行

实现一个Service，其中要实现的几个重要方法：
onStartCommand() 当组件调用startService时系统调用的函数
onBind()  组件绑定到service时，系统调用的函数
onCreate() 服务被创建时系统调用的函数
onDestroy() 服务被销毁时系统调用的函数

service有什么作用（好像没什么作用）：
1.告诉系统一些任务要在后台进行（不让系统杀死进程，回收资源）。 
2.提供一些功能让其他应用程序调用。对应的调用Context.bindService()

Bounded Service：
创建能被绑定的服务，其中重要的是实现onBind函数。这个函数返回一个binder对象，通过这个对象定义了编程接口，client可以用来与service交互。
发送请求，接收响应，或者执行IPC

当服务是本地服务(非IPC)，这时binder只返回本地服务即可(参考service的reference)。
当客户端与服务是进行进程间通信（IPC）时，这时的binder是实现AIDL的接口类。AIDL会自动生成一个stub接口

使用AIDL创建一个bounded service:
1. Create the .aidl file
This file defines the programming interface with method signatures.
2. Implement the interface 实现生成的stub接口（是一个binder接口）
The Android SDK tools generate an interface in the Java programming language, based on your .aidl file. This interface has an inner abstract class named Stub that extends Binder and implements methods from your AIDL interface. You must extend the Stub class and implement the methods.
3. Expose the interface to clients 实现服务的onbind函数，返回对应的binder
Implement a Service and override onBind() to return your implementation of the Stub class.

//client获得binder
服务实现onBind(返回binder)，用户实现onServiceConnected(接收服务返回的binder，将binder转换为服务)。

when a client (such as an activity) calls bindService() to connect to this service, the client's onServiceConnected() callback receives the mBinder instance returned by the service's onBind() method.

获得binder后要通过他获得需要的服务
 it must call YourServiceInterface.Stub.asInterface(binder) to cast the returned parameter to YourServiceInterface type.


AIDL好像不是线程安全的，实现时要注意

asInterface最后会生成一个stub.proxy类并返回

总结：
一般的系统服务，调用时都是进行进程间操作(IPC)。所以系统服务都是实现stub接口的类。

______________________
______________________|
______________________|

IBInder接口：不要直接实现该接口，一般继承Binder（实现了IBinder）
重要的API transact()对应Binder.onTransact()
These methods allow you to send a call to an IBinder object and receive a call coming in to a Binder object, respectively
这对方法是同步的，一个对transact()的调用不会返回，直到目标从Binder.onTransact()返回。这实际和调用本地对象
是一样的，IPC机制保证了跨进程的调用，和在当前进程调用表现是一样的。（本地方法调用也是要等待方法执行完成才
返回，跨进程调用要等待在另一个进程上被调用的方法的完成）

能够通过transact()传输的是Parcel对象，

判断远程对象不可用：
1，The transact() method will throw a RemoteException exception if you try to call it on an IBinder whose process no longer exists.
2，The pingBinder() method can be called, and will return false if the remote process no longer exists.
3，The linkToDeath() method can be used to register a IBinder.DeathRecipient with the IBinder, which will be called when its containing process goes away.


通常使用AIDL会自动生成一个Binder类（xxx.stub），实际使用中继承这个类。

______________________
______________________|
______________________|
Binder:
new Binder()@Binder.java-->init()-->android_os_Binder_init@android_util_Binder.cpp(将mObject域设为
JavaBBinderHolder)

register_android_os_Binder-->int_register_android_os_Binder

相关类JavaBBinderHolder，JavaBBinder继承BBinder @android_util_Binder.cpp

BBinder，BpBinder都继承IBinder，分别实现相应的方法（本地localBinder，远程remoteBinder）


frameworks/base/core/jni/android_util_Binder.cpp
frameworks/native/libs/binder/Binder.cpp
______________________
______________________|
______________________|
Parcel:能够包含扁平化数据和IBinder对象的引用(在另一端会获得一个与这个IBinder对象连接的IBinder的代理，用于IPC通信)

Parcel(int)-->init(int)@Parcel.java-->nativeCreat-->android_os_Parcel_create@android_os_parcel.cpp--new Parcel()@Parcel.cpp

parcel中操作流程：
获取paracel：
obtain(obj)-->Parcel(obj)-->init(obj)@Parcel.java-->mNativePtr=obj 或赋值nativeCreate()-->
android_os_Parcel_create@android_os_Parcel.cpp

parcel中函数：
writeInplace（len）：
	写入的长度为4的倍数，将len转为4的倍数（加11）padded。当padded等于len，则len刚好本就为4的倍数。
若padded大于len则len=n*4+[1,2,3]。转换后的padded大于len相应为3，2，1
finishWrite(len)：
	mDataPos增加len。
write-->writeInplace-->finishWrite
mData数据所在的位置，mDataCapacity容量。mDataPos数据的偏移位置(对mData的读取写入)，mDataSize数据的大小。

写入Binder：
writeStrongBinder@Parcel.java-->nativeWriteStrongBinder-->android_os_Parcel_writeStrongBinder
（判断binder类型，）@android_os_Parcel.cpp-->(通过mNativePtr操作，parcel)
writeStrongBinder-->flatten_binder(判断是BBinder/BpBinder，封装obj.对应类型BINDER_TYPE_HANDLE/BINDER)
-->finish_flatten_binder@Parcel.cpp

mNativePtr初始化：
init@Parcel.java-->nativeCreate-->android_os_Parcel_create-->new Parcel()@android_os_Parcel.cpp-->
生成Parcel@Parcel.cpp

读出Binder：
reply.readStrongBinder@ServiceManagerNative.java-->nativeReadStrongBinder-->
android_os_Parcel_readStrongBinder@android_os_Parcel.java-->
javaObjectForIBinder(env,___parcel->readStrongBinder())@android_util_Binder.java
___parcel->readStrongBinder()-->unflatten_binder@Parcel.cpp-->proc->getStrongProxyForHandle(flat->handle)-->getStrongProxyForHandle(返回new BpBinder(handle)，跨进程通信通过这个代理)@ProcessState.cpp


/home/wangbo/src/jb/frameworks/base/core/java/android/os/Parcel.java
/home/wangbo/src/jb/frameworks/native/libs/binder/Parcel.cpp
/home/wangbo/src/jb/frameworks/base/core/jni/android_os_Parcel.cpp

______________________
______________________|
______________________|
bindService()流程：
bindService@ContextImpl.java-->getDefault().bindService@ActivityManagerNative
-->【getDefault--gDefault.get--[gDefault-- asInterface(ServiceManager.getService("activity"))--
ActivityManagerProxy(传入binder,mRemote=binder)--am]--am.get@ActivityManagerNative,
获得一个实例ActivityManagerProxy(IBinder(activity服务)】-->
ActivityManagerProxy.bindService-->mRemote.transact@ActivityManagerNative.java
BIND_SERVICE_TRANSACTION）---->远端处理bindService-->【调用c.conn.connected(s.name, b.intent.binder)】@ActivityManagerService.java

精简流程：
bindService-->bindService(封装connection为IServiceConnection，传入到ActivityManagerService)-->
ActivityManagerNative.getDefault().bindService@ContextImpl.java-->
(gDefault.get()获得activity服务代理ActivityManagerProxy，跨进程调用)ActivityManagerProxy.bindService
-->(获取connection的BpBinder)IServiceConnection.Stub.asInterface(b)@ActivityManagerNative.java--
bindService@IActivityManager.java-->bindService-->c.conn.connected(s.name,b.intent.binder)
@ActivityManagerService.java-->(跨进程调用)InnerConnection.connected-->sd.connected-->
ServiceDispatcher.connected-->mActivityThread.post(new RunConnection)-->RunConnection.run-->
doConnected-->mConnection.onServiceConnected@LoadedApk.java-->onServiceConnected@ServiceConnection.java

获取IServiceConnection流程:
bindService@ContextImpl.java-->mPackageInfo（返回IServiceConnection）.getServiceDispatcher-->
new ServiceDispatcher(c, context, handler, flags)--sd.getIServiceConnection-->ServiceDispatcher.
getIServiceConnection(返回new InnerConnection)@LoadedApk.java-->

frameworks/base/core/java/android/app/LoadedApk.java
//============================
//系统服务生成
----------------------------
aidl生成的文件：
Ixxx.stub在接口Ixxx中实现。Ixxx接口包括要实现的函数，Ixxx.stub继承Binder类和该接口。
stub extends Binder{
  asInterface(android.os.IBinder obj)//返回Proxy的实例,远程调用通过remote。Proxy中remote = obj
  asBinder()                         //返回stub自身

  onTransact(){
      //由Binder中transact()调用。	
      //响应远程调用，执行本地实现的函数（Ixxx接口中的函数），返回执行结果
  }
	
  static class Proxy implements android.app.IAlarmManager{
	//代理类，proxy中remote用于远程调用传输
	...封装远程调用的函数
  }	
}

服务一般继承stub类
xxx extends Ixxx.stub{
    //实现接口中的函数
}

调用流程：
(获取远程对象的代理)Ixx.stub.asInterface(binder)-->(调用远程对象的方法)Ixx.stub.Proxy.xxMethod-->
(远程对象响应调用)Ixx.stub.onTransact


————————————————————————————
获取系统服务：
Context.getSystemService(Context.ALARM_SERVICE)-->getSystemService(从SYSTEM_SERVICE_MAP获取fethcer)-->
ServiceFetcher.getService-->createService(在注册服务时实现，返回服务的manager)@ContextImpl.java
____________________________
系统服务的添加：
所有的系统设置为静态调用,registerService(传入fetcher(重写获取服务的函数)@contextImpl.java-->createService
@ContextImpl.java-->ServiceManager.getService(获取binder)--Stub.asInterface(传入binder，远程调用通过
binder实现)）--> SYSTEM_SERVICE_MAP.put(serviceName, fetcher)

总结：系统服务远程调用使用的binder，是在添加系统服务时生成的。获取服务的核心在ServiceManager.getService，
见下面。
____________________________
系统服务如何响应远程调用：
SystemServer监听驱动传来的数据，再调用服务。

systemServer中调用servcieManager.addService加入服务。调用init1-->android_server_SystemServer_init1
@com_android_server_SystemServer.cpp-->system_init()@system_init.cpp。
init1中：
    ProcessState::self()->startThreadPool();
	startThreadPool-->spawnPooledThread(true)-->new PoolThread-->run-->threadLoop-->
	IPCThreadState::self()->joinThreadPool(mIsMain)
    IPCThreadState::self()->joinThreadPool();
	
joinThreadPool-->talkWithDriver(获取数据)--executeCommand(执行从驱动中获得的命令)
{

case BR_TRANSACTION：//是获得了一个请求命令
  binder_transaction_data tr;//接收的数据
  result = mIn.read(&tr, sizeof(tr));//从mIn中读取数据
  sp<BBinder> b((BBinder*)tr.cookie);//从tr中获取binder
  ......
  b->transact；//执行本地操作
  sendReply(reply, 0);//发送回复 -->writeTransactionData()
}
监听驱动中传来的请求。然后处理消息会调用b->transact-->onTransact。这里调用AIDL自动生成的函数，最终
会调用请求的service中函数。

b->transact-->onTransact@Binder.cpp

app中aidl产生的文件实现stub接口：
aidl产生的stub中会将响应的传入参数进行转换，后再调用本地的服务函数(参数中有IBander会转换成一个Binder代理，供服务回调client端)。

jb/out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/src/core/java/android/app
jb/frameworks/base/services/jni/com_android_server_SystemServer.cpp
jb/frameworks/base/cmds/system_server/library/system_init.cpp
frameworks/native/libs/binder/IPCThreadState.cpp

//==============================ServiceManager的操作：添加服务，获取服务

系统服务使用：参考IAlarmManager.java流程
asInterface返回new android.app.IAlarmManager.Stub.Proxy(obj)，会将mRemote=obj。

android.app.IAlarmManager.Stub.proxy实现IAlarmManager中的接口,如：调用方法setTime
setTime@IAlarmManager.java-->setTime@IAlarmManager.Stub.Proxy-->
mRemote.transact(Stub.TRANSACTION_setTime, _data, _reply, 0)。

//首先获取ServiceManager：
ServiceManagerNative.asInterface（IBinder），返回ServiceManagerProxy。该代理通过IBinder传输数据。
IBinder的获取通过：
getIServiceManager-->ServiceManagerNative.asInterface(BinderInternal.getContextObject())
@ServiceManager.java-->new ServiceManagerProxy(obj)@ServiceManagerNative.java(最终操作通过obj)


getContextObject@BinderInternal.java
getContextObject-->android_os_BinderInternal_getContextObject@android_util_Binder.cpp-->
ProcessState::self()->getContextObject-->getStrongProxyForHandle-->lookupHandleLocked(是vector容器)@ProcessState.cpp-->new BpBinder(0)
传入ServiceManagerNative.asInterface（）是BpBinder，通过以上可知实际中的transact是通过BpBinder实现。


设置handle entry(lookupHandleLocked中要获取的)
mHandleToObject.editItemAt@Vector.h-->editItemLocation@VectorImpl.cpp将对应的handle缓存在vector中。
取出handle，查看binder是否为null，若为null则new BpBinder(handle)。

//添加系统服务到serviceManager：
ServiceManager.addService(String name, IBinder service)@SystemService.java-->addService-->
getIServiceManager().addService-->ServiceManagerNative.asInterface(BinderInternal.getContextObject())
.addService@ServiceManager.java-->ServiceManagerProxy.addService(通过data.writeStrongBinder写入service。
传输parcel)@ServiceManagerNative.java-->（mRomote是BpBinder）mRemote.transact-->(通过BpBinder远程调用)BpBinder::transact-->IPCThreadState::self()-->transact@BpBinder.cpp--> 

一般在systemServer中添加服务(IBinder的实现)，驱动记录这些服务(对象的引用转换)。

//再从serviceManager获取服务：
getSystemService-->SYSTEM_SERVICE_MAP.get(name).getService(this)(获取Manager,通过manager调用服务)-->
ServiceManager.getService@ContextImpl.java-->getService-->getIServiceManager().getService
@ServcieManager.java-->ServiceManagerProxy.getService@ServiceManagerNative.java-->transact(CHECK_SERVICE_TRANSACTION,)-->（java层在这里获取，IBinder binder =reply.readStrongBinder()）-->
IPCThreadState::self()->transact@BpBinder.cpp-->transact--> waitForResponse(reply)@IPCThreadState.cpp
-->(reply->ipcSetDataReference)ipcSetDataReference

从serviceManger获取服务的handle，再获取一个代理BpBinder用来与systemServer通信，调用服务。
readStrongBinder@Parcel.java-->nativeReadStrongBinder-->android_os_Parcel_readStrongBinder
@android_os_Parcel.cpp-->readStrongBinder-->unflatten_binder@Parcel.cpp-->
getStrongProxyForHandle{
- 查找handle对应的实例，lookupHandleLocked(handle){
	- 从mHandleToObject中获取读应的实例
	- 若不存在，则新建一个实例并插入到mHandleToObject
	}
- 获取到实例，当BpBinder不存在，则新建BpBinder(new BpBinder(handle))
}@ProcessState.cpp

----------------------
ServiceManager接收端：service_manager.c
获取服务：
main@service_manager.c-->binder_loop-->binder_parse(判断接收的类型)@binder.c-->
(是BR_TRANSACTION)svcmgr_handler-->

do_add_service(增加服务，保存在这里的服务都是handle类型)

do_find_service(获取服务)-->bio_put_ref(将handle加入reply)


frameworks/base/core/java/android/os/ServiceManager.java
frameworks/base/core/java/android/os/ServiceManagerNative.java
frameworks/base/core/jni/android_util_Binder.cpp
frameworks/base/cmds/servicemanager/service_manager.c

//===================添加surfaceFlinger
inti1@SystemServcer.java-->android_server_SystemServer_init1@com_android_server_SystemServer.cpp-->
system_init-->SurfaceFlinger::instantiate@system_init.c-->instantiate-->publish@BinderServcie.h-->
sm->addService-->addService@BpServiceManager-->BpServiceManager.addService-->remote()->transact
@IServiceManager.cpp

获取sm（ServiceManager）：
defaultServiceManager-->interface_cast<IServiceManager>(ProcessState::self()->getContextObject(NULL))
@IServiceManager.cpp-->sp<INTERFACE>interface_cast(getStrongProxyForHandle(0))-->
INTERFACE::asInterface@IInterface.h-->IServiceManager::asInterface(宏实现IMPLEMENT_META_INTERFACE)
-->返回new BpServiceManager(obj)@IServiceManager.cpp-->BpInterface(obj)-->设置mRemote通过obj.get()
***实际mRemote是getStrongProxyForHandle(0),
getContextObject-->getStrongProxyForHandle(0)-->new BpBinder(0)



继承关系：
BpRefBase（成员mRemote）       IServiceManager
 |                             |
BpInterface（构造函数调用BpRefBase(obj)，mRemote(obj.get())@Binder.cpp）
 |
BpServiceManager(remote实际为ProcessState::getContextObject)

通过IPC获取obj：
ProcessState::getContextObject-->ipc->transact(0 /*magic*/, 0, data, &reply, 0)-->
reply.readStrongBinder()@ProcessState.cpp

接收端：
main@main_surfaceflinger.cpp-->publishAndJoinThreadPool@BinderService.h(启动进程，sm添加服务)
接收后处理函数：
Client::onTransact@SurfaceFlinger.cpp-->
BnSurfaceComposerClient::onTransact-->createSurface@ISurfaceComposerClient.cpp-->Client::createSurface
-->

//==============================相关类：
class IBinder : public virtual RefBase
class BpBinder : public IBinder

_____________________________
进程死亡处理：
远程代理加入监听：
BinderProxy.linkToDeath@Binder.java-->android_os_BinderProxy_linkToDeath-->target->linkToDeath
@android_util_Binder.cpp-->linkToDeath-->(保存处理对象)mObituaries->add@BpBinder.cpp

IPCThreadState::clearDeathNotification-->mOut.writeInt32(BC_CLEAR_DEATH_NOTIFICATION)

接收到远程进程死亡消息：
executeCommand(BR_DEAD_BINDER)-->proxy->sendObituary()@TPCThreadState.cpp
sendObituary-->reportOneDeath(取出处理对象，处理进程结束)-->recipient->binderDied@BpBinder.cpp

frameworks/base/core/jni/android_util_Binder.cpp
______________________
______________________|
______________________|
BpBinder::transact-->IPCThreadState::self()->transact@BpBInder.cpp

与驱动接口的传输流程：
transact-->writeTransactionData(封装binder_transaction_data，并写入到mOut)--waitForResponse-->
talkWithDriver-->ioctl(mProcess->mDriverFD, BINDER_WRITE_READ, &bwr)@TPCThreadState.cpp-->
binder_ioctl@binder.c-->(判断传入数据的读写大小，若是写,比如添加服务)-->binder_thread_write-->
(case:BC_TRANSACTION)binder_transaction--> binder_get_ref(proc, tr->target.handle)()--
binder_new_node(类型为Binder时，创建node)

接收端：
joinThreadPool-->talkWithDriver-->talkWithDriver@IPCThreadState.cpp-->
IPCThreadState::waitForResponse-->(talkWithDriver获取数据,处理远程调用返回的数据BR_REPLY)

IPCThreadState::waitForResponse-->executeCommand(处理从驱动获取数据,应答请求BR_TRANSACTION)-->
b->transact(调用binder的相应的函数)

jb/framework/native/libs/binder/IPCThreadState.cpp


//===============================kernel:
写入驱动的数据结构为binder_write_read，其中read指向mIn的数据，write指向mOut的数据。驱动处理mOut.data中命令和数据。
函数writeTransactionData@IPCThreadState.cpp向mOut中写入要传输的数据。

talkWithDriver@IPCThreadState.cpp-->ioctl(mProcess->mDriverFD, BINDER_WRITE_READ, &bwr)-->
---kernel--->binder_ioctl-->binder_thread_write(根据位置和大小处理传入指针指向的数据)
-->binder_transaction@binder.c
___________________________
serviceManager
发送端:
binder_ioctl-->binder_thread_write(传入进程，线程，要处理的数据)--binder_get_thread()创建Thread-->
binder_transaction(判断是BC_TRANSACTION，或BC_REPLY分别处理)
--{handle不为0时，binder_get_ref(获取引用，远程引用和本地引用的转换)-->}--
获得target_node=binder_context_mgr_node-->

---------------------------
打开驱动的进程，都加入到binder_procs中
binder_open-->hlist_add_head(&proc->proc_node, &binder_procs)将proc加入到binder_procs首位--
(分配binder_proc *proc)filp->private_data = proc
___________________________
接收端：
在init.rc中启动service servicemanager /system/bin/servicemanager

打开main@service_manager.c-->binder_open@binder.c

设置为Manager：main@service_manager.c-->binder_become_context_manager-->ioctl(bs->fd,BINDER_SET_CONTEXT_MGR
, 0)@binder.c-->驱动层binder_ioctl-->binder_context_mgr_node = binder_new_node(proc, NULL, NULL)-->
binder_new_node(创建binder_node)@binder.c

接收main@service_manager.c-->binder_loop@binder.c

jb/frameworks/base/cmds/servicemanager/service_manager.c
src/jb/frameworks/base/cmds/servicemanager/binder.c


//=====================================RefBase：

IBinder : public virtual RefBase   //@IBinder.h
-有方法transact
-能够被远程调用的对象，通过transact函数

BBinder : public IBinder           //@Binder.h
-实现transcat，onTransact

BpBinder : public IBinder          //@BpBinder.h
-getStrongProxyForHandle(获取一个与远程进程中handle对应的通信代理，使用这个代理调用远程对象)

BpRefBase : public virtual RefBase //@Binder.h
-提供mRemote(用于跨进程调用)

template<typename SERVICE>
class BinderService                //BinderService.h
-将服务加入到serviceManager，或添加服务后将服务加入线程池等待运城调用

template<typename INTERFACE>
class BnInterface : public INTERFACE, public BBinder         //
-供其他需要实现被远程调用的类继承并实现(如camera服务)

template<typename INTERFACE>
class BpInterface : public INTERFACE, public BpRefBase      //
-代理接口。自己的服务的方法封装后的接口(这个接口中的方法也通过BpBinder进行远程通信)



frameworks/native/include/binder/BinderService.h
frameworks/native/include/binder/IBinder.h
frameworks/native/include/binder/Binder.h
frameworks/native/include/binder/BpBinder.h
