//=====================================
PackageManager
  ↳ApplicationPackageManager
几个锁：LI必须获得锁lock install。LP必须获得锁lock package
——————————————————————
package服务:
main-->init1-->init2-->thr.start()-->ServerThread.run()-->PackageManagerService.main@SystemServer.java
main-->new PackageManagerService--ServiceManager.addService("package", m)@PackageManagerService.java

getPackageManager-->ApplicationPackageManager(this, pm)@ContextImpl.java

----------------------
获取package服务:
IPackageManager pm = ActivityThread.getPackageManager()-->getPackageManager-->
ServiceManager.getService("package")@ActivityThread.java

______________________
package服务：
main-->PackageManagerService-->(扫描文件夹)scanDirLI-->(判断是否apk并扫描，处理是否替换系统apk)
scanPackageLI(File)-->(解压apk文件)scanPackageLI(Package)-->mInstaller.install@PackageManagerService.java
install-->execute("install")-->transaction-->writeCommand@Installer.java-->(通过socket)-->
do_install@installd.c-->install(在/data/data/com.xxx.xxx(包名)下创建文件夹，改变用户权限)@commands.c

隐藏旧版系统apk：
scanPackageLI(File)-->mSettings.disableSystemPackageLPw@PackageManagerService.java-->
disableSystemPackageLPw--mDisabledSysPackages.put(放入相应列表)--replacePackageLPw(设置新的setting)

scanDirLI:逐个扫描文件中是apk的文件，发生错误则删除apk(非系统apk)。
scanPackageLI(file):


scanPackageLI(package):
获取使用的共享库mTmpSharedLibraries
是否是共享uid用户 mSetting
mSettings.getPackageLPw 获取PackageSetting
getPackageLPw(package...)-->getPackageLPw(name...)-->new PackageSetting@Settings.java

scanDirLI扫描和监听的文件夹：AppDirObserver
/system/framework          //一些资源，provider，res
/system/app
/vendor/app
/data/app           //安装的app
/data/app_private
______________________
外部存储扫描：
onDaemonConnected-->mPms.scanAvailableAsecs()@MountService.java-->scanAvailableAsecs-->
updateExternalMediaStatusInner@PackageManagerService.java-->getSecureContainerList@PackageHelper.java
-->getSecureContainerList@MountService.java-->executeForList("asec", "list")@NativeDaemonConnector.java
--通过socket-->AsecCmd::runCommand-->AsecCmd::listAsecsInDirectory("/mnt/secure/asec")@CommandListener.cpp
-->返回.asec文件列表

挂载/mnt/secure/asec/xxx.asec文件到/mnt/asec/xxx：
updateExternalMediaStatusInner-->loadMediaPackages-->AsecInstallArgs.doPreInstall-->
PackageHelper.mountSdDir@PackageManagerService.java-->getMountService().mountSecureContainer
@PackageHelper.java-->Connector.execute@MountService.java-->execute.NativeDaemonConnector.java-->
(通过socket)-->mountAsec(创建/mnt/asec/xxx挂载点)@VolumeManager.cpp

安装codePath，scanPackageLI(File)

——————————————————————
扫描过程：
scanPackageLI-->mSettings.getPackageLPw@PackageManagerService.java-->getPackageLPw-->getPackageLPw
@Settings.java-->

应用的设置mSetting:
PackageManagerService-->new Settings()@PackageManagerService.java-->this(Environment.getDataDirectory())
-->(创建/data/system文件夹，在文件夹中创建package***.xml文件)Settings("/data")@Settings.java


readLPw(优先使用backsetting)--readPackageLPw(读取<package>标签中的内容，如果是sharedId加入PendingPackage)
--getPackageLPw(处理PendingPackage，将)-->(package被重命名?)mRenamedPackages.put@Settings.java

readLPw-->mRenamedPackages.put

writeLPr--写package.xml(将原来的设置package.xml保存到packages-backup.xml)--
写package.list

getPackageLPw(处理packageSetting，)-->addPackageSettingLPw(保存packageSetting)-->mPackages.put

addPackageLPw-->mPackages.put

----------------------
创建应用id：
newUserIdLPw--Process.FIRST_APPLICATION_UID + i(查找mUserIds中没有用的的id值i，再加上10000)@Setting.java


frameworks/base/services/java/com/android/server/pm/Settings.java
----------------------
读取偏好设置：
startActivityMayWait-->resolveActivity@ActivityStack.java-->resolveIntent-->
chooseBestActivity(查找合适的app，没有找到则返回选择对话框)-->findPreferredActivity
(查找以前选择过的app)@PackageManagerService.java

保存偏好应用设置:
onButtonClick-->startSelected-->onIntentSelected-->getPackageManager().
addPreferredActivity@ResolverActivity.java-->addPreferredActivity(将偏好保存)
->scheduleWriteSettingsLocked-->mHandler.sendEmptyMessageDelayed(WRITE_SETTINGS..)
-->PackageHandler.sendEmptyMessageDelayed-->handleMessage-->doHandleMessage-->
mSettings.writeLPr@PackageManagerService.java-->writeLPr-->writePreferredActivitiesLPr
@Setting.java

//替换偏好设置
replacePreferredActivity@PackageManagerService.java

ApplicationPackageManager

相关文件：
data/system/packages.xml
data/system/packages-backup.xml
data/system/packages.list
______________________
PackageParser：


parsePackage-->parsePackage(扫描AndroidManifest.xml)
______________________
packageManager处理sd卡数据
deleteApplicationCacheFiles-->clearExternalStorageDataSync@PackageManagerService.java

clearApplicationUserData-->clearExternalStorageDataSync@PackageManagerService.java


frameworks/base/services/java/com/android/server/pm/Installer.java
frameworks/base/services/java/com/android/server/pm/PackageManagerService.java
================================
installd服务：在init.rc中启动
main(接收命令)-->execute-->cmds[i].func(命令有ping，install)-->(若install)do_install@installd.c
-->install(在/data/data/com.xxx.xxx(包名)下创建文件夹，改变用户权限)@commands.c

frameworks/base/cmds/installd/installd.c
frameworks/base/cmds/installd/commands.c
================================
应用安装：
位置在manifest.xml中说明：android:installLocation="preferExternal"或“auto”
如果没有说明，应用被安装在内部存储，并且不能被移到外部存储。如果说明为“auto”，则可被用户移动。
当安装在外部空间时：
-只要外部存储被挂载，程序执行是没有影响。
-apk文件存储在外部空间，其他的用户数据，数据库，.dex文件和扩展的本地代码都存储在内部。
-存储应用的容器被加密，只有安装这个应用的设备能够解密该应用。安装在SD卡上的应用只能在安装时的设备上使用
-用户可以将应用程序移动到内部空间

安装：系统首先启动PackageInstallActivity
onCreate-->initiateInstall-->startInstallConfirm(安装确认对话框)-->onClick-->startActivity@
PackageInstallActivity.java-->onCreate-->initView--> pm.installPackage(传入observer)-->
PackageInstallObserver.packageInstalled-->mHandler.sendMessage-->handleMessage(处理安装结果)
@InstallAppProgress.java

packageManagerService中的安装处理流程：
pm.installPackage@nstallAppProgress.java-->installPackage@ApplicationPackageManager.java-->
installPackage-->installPackage(packageURI, observer, flags, null)-->installPackageWithVerification-->
mHandler.sendMessage(INIT_COPY)-->PackageHandler.handleMessage-->PackageHandler.doHandleMessage-->
connectToService-->mContext.bindService-->DefaultContainerConnection.onServiceConnected-->
(将要安装的信息加入mPendingInstalls，如果0位置则没有开始，发送开始信息)mHandler.sendMessage(MCS_BOUND)
-->(开始执行操作，如果有多个要安装则顺序处理)params.startCopy(拷贝完调用handleReturnCode)-->handleStartCopy
-->InstallParams.handleStartCopy(判断装内部或外部存储)-->(安装在内部)args.copyApk(mContainerService, true)
-->FileInstallArgs.copyApk(安装在/data/app)-->imcs.copyResource@PackageManagerService.java-->
copyResource-->copyFile-->copyToFile@DefaultContainerService.java

拷贝完成安装：
params.startCopy(拷贝完调用handleReturnCode)-->InstallParams.handleReturnCode-->processPendingInstall
-->installPackageLI(调用args.doRename将拷贝的文件，重命名为包名)-->setApplicationInfoPaths(设置路径)
--installNewPackageLI(扫描指定文件)-->scanPackageLI(package)-->


//8.0
installPackage-->installCommon@ApplicationPackageManager.java-->
installPackageAsUser{
- 
}@PackageManagerService.java

frameworks/base/core/java/android/app/ApplicationPackageManager.java
frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java
___________________________________
安装在外部sd卡：创建/mnt/secure/asec/xxx.asec文件,通过/mnt/secure/asec能够访问sd卡中.android_secure文件夹内容。
获取容器id：
getTempContainerId-->(获取)smdl2tmp(编号)@PackageManagerService.java
asec位置：
外部/mnt/secure/asec，内部/data/app-asec

args.copyApk(mContainerService, true)-->AsecInstallArgs.copyApk-->imcs.copyResourceToContainer(smdl2tmp1)
@PackageManagerService.java-->copyResourceToContainer-->copyResourceInner-->PackageHelper.createSdDir
@DefaultContainerService.java-->mountService.createSecureContainer@PackageHelper.java-->
createSecureContainer-->mConnector.execute(asec,create)@MountService.java-->AsecCmd::runCommand
vm->createAsec@CommandListener.cpp-->createAsec(创建/data/secure/asec/smdl2tmp[x],建立挂载点
/mnt/asec/xxx)@VolumeManager.cpp

在/mnt/secure/asec中创建.asec文件后，返回缓存目录/mnt/asec/

重命名文件：
doRename-->PackageHelper.renameSdDir@PackageManagerService.java-->renameSdDir@PackageHelper.java
-->renameSecureContainer-->mConnector.execute@MountService.java-->AsecCmd::runCommand-->
vm->renameAsec@CommandListener.cpp-->renameAsec(将/mnt/secure/asec/xxx.asec重命名)@VolumeManager.cpp

挂载文件到新目录：
AsecInstallArgs.doRename@PackageManagerService.java-->mountSdDir@PackageHelper.java-->mountSecureContainer
-->mConnector.execute@MountService.java-->execute.NativeDaemonConnector.java-->(通过socket)-->
mountAsec(创建/mnt/asec/xxx挂载点)@VolumeManager.cpp

拷贝文件：拷贝到/mnt/asec/
copyResourceToContainer(创建asec文件,返回目录/mnt/asec/xxx)-->FileUtils.copyFile
(拷贝.apk和lib文件到/mnt/asec/xxx)@DefaultContainerService.java
_________________________________
parsePackage(File)-->parsePackage(Resource)


generatePackageInfoFromSettingsLPw

installPackageLI-->setApplicationInfoPaths
__________________________________

创建安装参数：
installPackageWithVerification-->new InstallParams

创建FileInstallArgs：
createInstallArgs(InstallParams)-->new FileInstallArgs-->


PackageHandler.doHandleMessage(CHECK_PENDING_VERIFICATION,PACKAGE_VERIFIED)-->processPendingInstall-->installPackageLI-->installNewPackageLI

handleReturnCode-->processPendingInstall-->installPackageLI-->installNewPackageLI

安装路径：
mDrmAppPrivateInstallDir  /data/app-private
mAppInstallDir            /data/app
__________________________________
文件夹监听器：(apk完成拷贝后)
(data/app中被加入文件后)-->AppDirObserver.onEvent-->(添加事件，必须是apk才解析)scanPackageLI(File)-->

__________________________________
INSTALL_FORWARD_LOCK标识的设置：(基本都没有设置)

根据package或packageSetting中的flag设置：
scanPackageLI-->createInstallArgs-->packageFlagsToInstallFlags(设置)@PackageManagerService.java

movePackage@PackageManagerService.java

从package或packageSetting中获取：
isForwardLocked(PackageParser.Package pkg) 或isForwardLocked(PackageSetting ps)

获取INSTALL_FORWARD_LOCK信息：
InstallParams.isForwardLocked(根据flag获取信息)

installForwardLocked

InstallArgs.isFwdLocked(从flag获取)

frameworks/base/core/java/android/app/ApplicationPackageManager.java
frameworks/base/packages/DefaultContainerService/src/com/android/defcontainer/DefaultContainerService.java
frameworks/base/core/java/com/android/internal/content/PackageHelper.java
================================
解析package中activity,service,provider,BroadcastReceiver信息：

收集保存activity信息：
ActivityIntentResolver.addActivity-->ActivityIntentResolver.addFilter@PackageManagerService.java-->
addFilter(保存activity中的过滤器信息)-->(分类过滤信息)register_intent_filter--register_mime_types
@IntentResolver.java


查询activity,service,broadcast:

queryIntentActivities(Intent intent, int flags)@PackageManagerService.java

queryIntentServices(Intent intent, int flags)@PackageManagerService.java

queryBroadcastReceivers(Intent intent, int flags)

queryContentProviders(String processName,int uid, int flags)


广播会自动设置FLAG_EXCLUDE_STOPPED_PACKAGES，过滤掉stop状态的app。
解析intent：
resolveIntent(传入当前用户ID，一般为0)-->queryIntentActivities-->ActivityIntentResolver.queryIntent-->
super.queryIntent@PackageMangerService.java-->queryIntent-->(保存满足条件的目标)
buildResolveList@IntentResolver.java


scanPackageLI{

}

解析AndroidManifest.xml
parseApplication{

- 解析provider，parseProvider并加入owner.providers.add
}
_________________________________
provider:



queryContentProviders{
- 获取contentProvider遍历器，mProvidersByComponent.values().iterator()
- PackageParser.generateProviderInfo生成providerInfo并加入容器

}

















================================
开机提示：Android is upgrading...
run{
- startBootstrapServices-->PackageManagerService.main
- startOtherServices-->mPackageManagerService.performBootDexOpt
}@SystemServer.java
//扫描模式scanMode = SCAN_MONITOR | SCAN_NO_PATHS | SCAN_DEFER_DEX | SCAN_BOOTING
main-->PackageManagerService-->scanDirLI-->scanPackageLI-->performDexOptLI{
- dalvik.system.DexFile.isDexOptNeeded-->Dalvik_dalvik_system_DexFile_isDexOptNeeded
	@dalvik_system_DexFile.cpp-->dvmDexCacheStatus@JarFile.cpp
}

dvmDexCacheStatus{
- 查看apk路径下是否有odex文件
- 没有则解压apk，dexZipFindEntry
- 获取cache文件路径，/data/dalvik-cache/system@app@appname@
}
@dalvik/vm/native/dalvik_system_DexFile.cpp
@dalvik/vm/JarFile.cpp

ServerThread.run()-->pm.performBootDexOpt(处理mDeferredDexOpt中的apk)@SystemServer.java
-->performBootDexOpt-->(不是第一次启动)ActivityManagerNative.getDefault().showBootMessage
@PackageManagerService.java-->showBootMessage-->mWindowManager.showBootMessage
@ActivityManagerService.java-->showBootMessage(判断是否要显示消息)-->mPolicy.showBootMessage
@WindowManagerService.java-->showBootMessage{
- 若没有创建则创建new ProgressDialog().setMessage
- 已经创建则设置消息字符，setMessage
}@PhoneWindowManager.java


结束动画打开显示：
showBootMessage-->performEnableScreen(判断是否是显示启动消息，是否系统还没有启动)-->
mPolicy.enableScreenAfterBoot@ActivityManagerService.java


______________
//dexoat
将apk加入要dex的容器：
scanPackageLI(PackageParser.Package, parseFlags, scanMode, currentTime)-->scanPackageDirtyLI
-->performDexOptLI(若!forceDex && defer则将apk加入容器)


-->performDexOptLI-->mInstaller.dexopt@PackageManagerService.java-->
dexopt(发送命令dexopt)-->execute-->transaction-->(mOut是连接"installd"地址套接字的输出流)mOut.writeCommand
@Installer.java-->

installd守护程序：
main-->accept(接收消息)-->execute(处理消息，执行cmds[i].func)-->(若是dexopt命令)do_dexopt@install.c
-->dexopt-->run_dexopt-->execl(执行"/system/bin/dexopt")@commands.c-->main-->fromZip-->
processZipFile-->extractAndProcessZip@OptMain.cpp-->dvmContinueOptimization-->rewriteDex@DexPrepare.cpp


vm虚拟机:
main@Main.cpp-->JNI_CreateJavaVM@Jni.cpp-->dvmStartup-->processOptions@Init.cpp

dalvik/dexopt/OptMain.cpp
dalvik/vm/analysis/DexPrepare.cpp
dalvik/vm/Init.cpp
-----------------
判断是否显示消息：
mAllowBootMessages=WindowManagerService.mAllowBootMessages=WMThread.mAllowBootMessages
=WindowManagerService.main(!firstBoot)=PackageManagerService.isFirstBoot//不是第一次启动允许显示消息框

WindowManagerService.main(!firstBoot)@System_server.java-->main-->new WMThread(传入allowBootMsgs)-->
WMThread.run(设置值mAllowBootMessages)-->WindowManagerService(传入值mAllowBootMessages)-->
mAllowBootMessages = showBootMsgs

hideBootMessagesLocked-->mShowingBootMessages = fasle@WindowManagerService.java

显示“正在启动应用”：
pm.performBootDexOpt--ActivityManagerNative.getDefault().showBootMessage@System_server.java

-------------------
关闭启动消息：
enableScreenAfterBoot-->hideBootMessagesLocked@WindowManagerService.java
================================

错误原因是apk命名问题(多个点):
rewriteDex(DexOpt没有成功)@DexPrepare.cpp


dalvik/vm/analysis/DexPrepare.cpp


================================
安装apk：
onCreate-->initiateInstallfyt-->startInstallConfirmfyt@PackageInstallerActivity.java


package/app/PackageInstaller/src/com/android/packageInstaller/PackageInstallerActivity.java
