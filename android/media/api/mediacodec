//api接口
input ---->codec----> output


Data Types{
- Compressed Buffers //需要解码的数据
- Raw Audio Buffers //pcm数据
- Raw Video Buffers{
	- COLOR_FormatSurface
	- YUV,例如COLOR_FormatYUV420Flexible
	- other, specific formats
	}
}

MediaCodec{
//Creation
- MediaExtractor.getTrackFormat //获取文件格式
- MediaCodecList.findDecoderForFormat(MediaFormat) //获取codec名字
- createByCodecName(String) //创建codec
//Initialization
- setCallback()
- configure (MediaFormat, Surface, MediaCrypto,flags) //设置视频输出的surface.解码还是编码
//Codec-specific data  一些特殊编码数据.必须在start之前提交
//Data Processing
- queueInputBuffer(index)/onInputBufferAvailable //同步/异步
- dequeuOutputBuffer(index)/onOutputBufferAvailable //同步/异步
}

example{
- MediaCodec codec = MediaCodec.createDecoderByType(type);
- codec.configure(format, ...);
- codec.start();
 for (;;) {
   int inputBufferIndex = codec.dequeueInputBuffer(timeoutUs);
   if (inputBufferIndex >= 0) {
     inputBuffers = codec.getInputBuffers(inputBufferIndex)
     // fill inputBuffers[inputBufferIndex] with valid data
     ...
     codec.queueInputBuffer(inputBufferIndex, ...);
   }

   int outputBufferIndex = codec.dequeueOutputBuffer(timeoutUs);
   if (outputBufferIndex >= 0) {
     outputBuffers = codec.getOutputBuffers(outputBufferIndex)
     // outputBuffer is ready to be processed or rendered.
     ...
     codec.releaseOutputBuffer(outputBufferIndex, ...);
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
     outputBuffers = codec.getOutputBuffers();
   } else if (outputBufferIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
     // Subsequent data will conform to new format.
     MediaFormat format = codec.getOutputFormat();
     ...
   }
 }
- codec.stop();
- codec.release();
}

//MediaCodec================
MediaCodec::CreateByType(mime){
//android9.0
- MediaCodecList::findMatchingCodecs(mime,&componentName){
	- getInstance{
		- IMediaPlayerService> service = interface_cast(getService("media.player"))
		- sRemoteList = service->getCodecList //获取解码list
		}
	- list->findCodecByType(mime) //查找对应的几码器
	- matchs->push(componentName) //保存
	- 判断是否优先软解并返回
	}@MediaCodecList.cpp
- 从查找到的codec中初始化，codec->init(componentName)
//android 8.1
- codec = new MediaCodec(looper)
- codec->init(mime)
}@MediaCodec.cpp


init{
//android9.0
- mCodec = GetCodecBase{
	- new ACodec //omx
	- new MediaFilter //filter
	}

//android8.1
- mCodec = GetCodecBase(name)= new　ACodec
- 视频解码创建新线程,mCodecLooper = new ALooper
- mCodec->setCallback(CodecCallback)
- mBufferChannel = mCodec->getBufferChannel()
- mBufferChannel->setCallback(BufferCallback)
}@MediaCodec.cpp

//设置surface
MediaCodec::configure(format,surface){
- msg = new AMessage(kWhatConfigure)
- msg->setMessage("format", format)
- msg->setObject("surface", surface)
- PostAndAwaitResponse(msg, &response)-->onMessageReceived(kWhatConfigure){
	- handleSetSurface(surface){
		- connectToSurface(surface)-->nativeWindowConnect
		- mSurfcae = surface
		}
	- format->setObject("native-window", obj)//发送surface对象到Acodec
	- mCodec->initiateConfigureComponent
	}
}@MediaCodec.cpp

setSurface-->onMessageReceived(kWhatSetSurface){
- connectToSurface
- 软解kFlagUsesSoftwareRenderer{
	- pushBlankBuffersToNativeWindow
	- 
	}
- mCodec->setSurface(surface)
- disconnectFromSurface
}@MediaCodec.cpp

getInputBuffers(&buf)/getOutputBuffers-->onMessageReceived(kWhatGetBuffers){
- mBufferChannel->getInputBufferArray(dstBuffers) //input
- mBufferChannel->getOutputBufferArray(dstBuffers)//output
}@MediaCodec.cpp



allocateBuffers-->allocateBuffersOnPort


createPersistentInputSurface@MediaCodec.java-->native_createPersistentInputSurface
-->android_media_MediaCodec_createPersistentInputSurface@android_media_MediaCodec.cpp
CreatePersistentInputSurface{
- OMXClient.connect()
- omx = OMXClient.interface()
}@MediaCodec.cpp

//ACodec====================
//状态机管理
ACodec{ 
- mUninitializedState = new UninitializedState(this)
- mLoadedState = new LoadedState(this)
- mLoadedToIdleState = new LoadedToIdleStat-(this)
- mIdleToExecutingState = new IdleToExecutingState(this)
- mExecutingState = new ExecutingState(this)
- mOutputPortSettingsChangedState =new OutputPortSettingsChangedState(this)
- mExecutingToIdleState = new ExecutingToIdleState(this)
- mIdleToLoadedState = new IdleToLoadedState(this)
- mFlushingState = new FlushingState(this)
- mVideoPoewerHint = new VideoPowerHintInstance(mIsWFDRunning)
- changeState(mUninitializedState) //初始状态
}

initiateSetup-->msg(kWhatSetup)-->UninitializedState::onSetup{
- onAllocateComponent
- mCodec->mLoadedState->onConfigureComponent
- mCodec->mLoadedState->onStart
}

initiateConfigureComponent-->msg(kWhatConfigureComponent)-->LoadedState::onConfigureComponent-->
configureCodec{
- setComponentRole
- haveNativeWindow = msg->findObject("native-window")//查找是否有窗口
- haveNativeWindow{
	- 
	}
- video,haveNativeWindow{
	- mNativeWindow = static_cast<Surface *>(obj.get()) 
	}
}

ACodec::setSurface-->/*状态机处理*/onMessageReceived(kWhatSetSurface)-->
mCodec->handleSetSurface{
-
- setupNativeWindowSizeFormatAndUsage
}ACodec.cpp


ACodec::UninitializedState::onAllocateComponent{
- 指定componentName{
	- index = MediaCodecList::getInstance()->findCodecByName(componentName)
	- matchingCodecs.add
	}
- 没有指定componentName,MediaCodecList::findMatchingCodecs
- sp<IOMXNode> omxNode,OMXClient client
- sp<IOMX> omx = client.interface()
- client.connect //连接到Omx服务
- omx->allocateNode(componentName.c_str(), observer, &omxNode) //从Omx获取codec.保存到omxNode
}



frameworks/base/media/java/android/media/MediaCodec.java
frameworks/base/media/jni/android_media_MediaCodec.cpp
frameworks/av/media/libstagefright/MediaCodec.cpp
frameworks/av/media/libstagefright/ACodec.cpp
frameworks/av/media/libstagefright/MediaCodecList.cpp
