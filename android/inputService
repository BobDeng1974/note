//
InputManagerService(构造方法)@InputManagerService.java-->nativeInit-->NativeInputManager(构造方法)
@com_android_server_input_InputManagerService.cpp-->new InputManager@InputManager.cpp-->
————————————————————————————————
开始服务：
WindowManagerService-->mInputManager.start()@WindowManagerService.java-->start@InputManagerService.java
-->nativeStart-->im->getInputManager()->start()@com_android_server_input_InputManagerService.cpp-->
start(读取,分发循环)@InputManager.cpp-->mDispatcherThread->run,mReaderThread->run@Threads.cpp-->[
(mCanCallJava为true)createThreadEtc-->androidCreateThreadEtc-->gCreateThreadFn-->_threadLoop-->
self->threadLoop()-->]threadLoop

创建inputManagerService：
InputManagerService-->mPtr = nativeInit(this, mContext, mHandler.getLooper().getQueue())
@InputManagerService-->nativeInit-->new NativeInputManager-->(创建读取，分发对象。分发对象作为监听器传入
读取对象中)new InputManager(eventHub, this, this)@com_android_server_input_InputManagerService.cpp-->
initialize(创建读取，分发线程)-->new InputReaderThread--new InputDispatcherThread@InputManager.cpp

创建InputReader:
InputManager-->new InputReader(eventHub, readerPolicy, mDispatcher)@InputManager.cpp

创建InputDispatcher:
InputManager-->new InputDispatcher(dispatcherPolicy)@InputManager.cpp



addClient-->mClients.put@InputMethodManagerService.java

windowGainedFocus-->mIWindowManager.inputMethodClientHasFocus@InputMethodManagerService.java
-->



____________________________
更新焦点窗口：
updateFocusedWindowLocked{
- computeFocusedWindowLocked-->findFocusedWindowLocked //获取焦点窗口,可见窗口才能获得焦点
- mInputMonitor.setInputFocusLw-->setInputFocusLw@InputMonitor.java
}
@WindowManagerService.java

更新事件接收窗口：
addWindow@WindowManagerService.java-->updateInputWindowsLw-->mService.mInputManager.
setInputWindows@InputMonitor.java-->setInputWindows-->nativeSetInputWindows@InputManagerService.java
-->nativeSetInputWindowsim->setInputWindows-->NativeInputManager::setInputWindows-->mInputManager->
getDispatcher()->setInputWindows@com_android_server_input_InputManagerService.cpp-->
setInputWindows@InputDispatcher.cpp

创建本地windowHandle：
NativeInputManager::setInputWindows@com_android_server_input_InputManagerService.cpp-->
android_server_InputWindowHandle_getHandle-->new NativeInputWindowHandle@
com_android_server_input_InputWindowHandle.cpp

查找事件接收窗口：
findFocusedWindowTargetsLocked-->addWindowTargetLocked(设置事件目标)@InputDispatcher.cpp

updateInputWindowsLw(更新窗口的最新信息，是否可视，暂停...)@InputMonitor.java

transferTouchFocus

findTouchedWindowTargetsLocked

setInputWindows

设置焦点应用：
setFocusedActivityLocked@ActivityManagerService.java-->setFocusedApp@WindowManagerService.java
-->setFocusedAppLw@InputMonitor.java-->setFocusedApplication@InputManagerService.java
-->setFocusedApplication@com_android_server_input_InputManagerService.cpp-->
setFocusedApplication@InputDispatcher.cpp

============================
Connection注册(建立事件通道和事件接收目标的联系)：

两种注册方式：
1.PolicyHandler.handleMessage(MSG_ENABLE_POINTER_LOCATION)-->enablePointerLocation-->
mWindowManagerFuncs.monitorInput@PhoneWindowManger.java-->monitorInput@WindowManagerService.java
-->monitorInput-->nativeRegisterInputChannel@InputManagerService.java

2.addWindow-->mInputManager.registerInputChannel(inputchannel[0]，InputWindowHandle(窗口位置，大小))
@WindowManagerService.java-->registerInputChannel-->nativeRegisterInputChannel@InputManagerService.java

本地注册inputchannle：
nativeRegisterInputChannel-->registerInputChannel@com_android_server_input_InputManagerService.cpp-->
[mInputManager->getDispatcher()->registerInputChannel]-->registerInputChannel{
- getConnectionIndexLocked(inputChannel),已经注册则返回
- 创建链接，new Connection(inputChannel, inputWindowHandle, monitor)
- 获取通道fd，加入容器mConnectionsByFd.add(fd, connection)
- mLooper->addFd(...ALOOPER_EVENT_INPUT,handleReceiveCallback)
@InputDispatcher.cpp

----------------------------
创建inputChannel：
addWindow-->InputChannel.openInputChannelPair@WindowManagerService.java-->openInputChannelPair-->
nativeOpenInputChannelPair@InputChannel.java-->android_view_InputChannel_nativeOpenInputChannelPair
-->InputChannel::openInputChannelPair@android_view_InputChannel.cpp-->openInputChannelPair-->
socketpair(创建套接字，实际inputChannel封装socket.通信通过socket)--(创建并返回服务端和客户端inputChannel)
new InputChannel()@InputTransport.cpp

____________________________
dispatcher处理事件：
threadLoop-->mDispatcher->dispatchOnce-->dispatchOnceInnerLocked{
- 若使能重复按键，则复位重复计数
- 获取一个事件mPendingEvent{
	- mInboundQueue.dequeueAtHead
	- 更新用户操作时间，pokeUserActivityLocked
	}
- 是否要丢弃事件
- 根据事件类型进行分发TYPE_KEY，{
	- 是app切换时间{
		- 若是切换app事件(back，home)，重设app切换时间
		- 若是其它事件，则丢弃该事件
		}
	- 事件若陈旧，则丢弃当前事件
	- 若有下个非阻塞事件，则丢弃当前事件
	- 分发事件，dispatchKeyLocked
	}
- 处理完成，事件是否被丢弃dropInboundEventLocked //输出丢弃原因

}


dispatchOnceInnerLocked-->dispatchKeyLocked{
- 事件没有分配，dispatchInProgress==false{
	- 是否是重复事件
	}
- 
- 若需要丢弃事件，则设置注入事件的丢弃原因setInjectionResultLocked
- 查找事件目标窗口，findFocusedWindowTargetsLocked{
	- 找到可接收事件的目标窗口，加入到目标中addWindowTargetLocked(新加入一个目标到inputTargets)
	}
- 设置注入事件的结果返回目标，setInjectionResultLocked //设置出错状态
- 加入检测事件的接收目标(不一定是窗口)
- 分发事件到目标，dispatchEventLocked
- 消耗事件，startDispatchCycleLocked
}

(分发到不同的目标中)-->dispatchEventLocked(根据传入的目标，找到对应的connection)-->
prepareDispatchCycleLocked-->enqueueDispatchEntriesLocked-->InputDispatcher::
enqueueDispatchEntryLocked{
- 创建事件对象，new DispatchEntry
- 判断按键和触摸事件是否是连续的，不连续的则丢弃
- 记录事件，后面判断是否该事件是否被处理。incrementPendingForegroundDispatchesLocked
- 加入队列，connection->outboundQueue.enqueueAtTail
}

消耗事件：
startDispatchCycleLocked{
-- connection状态正常，且outboundQueue不为空{
- 获取队列头事件，connection->outboundQueue.head
- 判断事件类型{
	- 按键，connection->inputPublisher.publishKeyEvent
	- 触摸，connection->inputPublisher.publishMotionEvent-->publishMotionEventP{
		- 封装消息，InputMessage
		- 发送消息，mChannel->sendMessage-->send
		}@InputTransport.cpp
	}
- 检查分发结果
- 删除已处理的事件，connection->outboundQueue.dequeue
- 加入到等待结果队列，connection->waitQueue.enqueueAtTail(dispatchEntry);
}
}



客户端socket获取事件：
initialize{
- 获取接收文件描述符，mInputConsumer.getChannel()->getFd()
- 加入到消息监听，mMessageQueue->getLooper()->addFd
}
Looper::pollInner-->response.request.callback->handleEvent-->NativeDisplayEventReceiver::
handleEvent-->NativeInputEventReceiver::handleEvent-->consumeEvents-->env->CallVoidMethod(gInputEventReceiverClassInfo.dispatchInputEvent)
@android_view_InputEventReceiver.cpp-->dispatchInputEvent-->onInputEvent@InputEventReceiver.java



加入命令：
postCommandLocked-->(加入到命令队列)mCommandQueue.enqueueAtTail@InputDispatcher.cpp
执行命令：
dispatchOnce-->runCommandsLockedInterruptible-->(this->*command)(commandEntry)@InputDispatcher.cpp

_____________________________
窗口消耗事件：

设置inputchannel：用来读取事件的socket
setView(创建InputChannel对象，后面会被替换)-->sWindowSession.add@ViewRootImpl.java-->add@Session.java
-->addWindow{
- 创建通道，InputChannel.openInputChannelPair
- (将窗口的接收客户端重设为正确的inputChannel)inputChannels[1].transferTo(outInputChannel)
- 注册窗口的事件接收通道，mInputManager.registerInputChannel(inputChannels[0])-->
	nativeRegisterInputChannel
}@WindowManagerService.java

mReceiverPtr = nativeInit(this, inputChannel, mMessageQueue)@InputEventReceiver.java-->
new NativeInputEventReceiver@android_view_InputEventReceiver.cpp

主线程中的looper接收inputEvent数据：
NativeInputEventReceiver::handleEvent-->consumeEvents@android_view_InputEventReceiver.cpp



创建inputEvent接收器：
setView-->new WindowInputEventReceiver(mInputChannel,Looper.myLooper())@ViewRootImple.java
new InputEventReceiver-->nativeInit@InputEventReceiver.java-->nativeInit-->receiver->initialize
NativeInputEventReceiver::initialize-->mMessageQueue->getLooper()->addFd(传入socketpair中消耗端)
@android_view_InputEventReceiver.java
-----------------------------
处理获取的事件：
NativeInputEventReceiver::handleEvent-->consumeEvents-->
env->CallVoidMethod(mReceiverObjGlobal,gInputEventReceiverClassInfo.dispatchInputEvent, seq, inputEventObj)
@android_view_InputEventReceiver.cpp-->dispatchInputEvent@InputEventReceiver.java-->
WindowInputEventReceiver.onInputEvent-->(将事件加入队列)enqueueInputEvent-->enqueueInputEvent
(立即处理doProcessInputEvents)或延迟处理scheduleProcessInputEvents-->(发送处理广播)
mHandler.sendMessage(MSG_PROCESS_INPUT_EVENTS)-->ViewRootHandler.handleMessage-->doProcessInputEvents
deliverInputEvent(处理按键，触摸...等事件)-->(触摸事件)deliverPointerEvent-->mView.dispatchPointerEvent
@ViewRootImpl.java-->dispatchTouchEvent@View.java


读取事件超时，调用回调处理未处理的事件：
NativeInputEventReceiver::handleEvent-->consumeEvents-->
env->CallVoidMethod(mReceiverObjGlobal,gInputEventReceiverClassInfo.dispatchBatchedInputEventPending
@android_view_InputEventReceiver.cpp-->dispatchBatchedInputEventPending-->onBatchedInputEventPending
@InputEventReceiver.java-->onBatchedInputEventPending-->(注册与帧同步的回调)scheduleConsumeBatchedInput
@ViewRootImpl.java

窗口主动获取事件(主要是在动画，新一帧前消耗掉所有的事件)：
doCallbacks-->c.run@Choreographer.java-->ConsumeBatchedInputRunnable.run-->doConsumeBatchedInput
-->mInputEventReceiver.consumeBatchedInputEvents@ViewRootImpl.java-->
nativeConsumeBatchedInputEvents@InputEventReceiver.java-->nativeConsumeBatchedInputEvents-->
receiver->consumeEvents-->NativeInputEventReceiver::consumeEvents-->mInputConsumer.consume
@android_view_InputEventReceiver.cpp-->InputConsumer::consume(按键事件直接返回处理，触摸事件
要处理一次触摸的所有数据)-->(读取事件)mChannel->receiveMessage-->::recv@InputTransport.cpp
______________________________
事件被处理完成：
doProcessInputEvents-->deliverInputEvent-->(处理按键或触摸，触摸球等事件)deliverKeyEvent-->
finishInputEvent-->q.mReceiver.finishInputEvent@ViewRootImpl.java-->finishInputEvent@
InputEventReceiver.java->nativeFinishInputEvent-->receiver->finishInputEvent-->finishInputEvent-->
mInputConsumer.sendFinishedSignal@android_view_InputEventReceiver.cpp-->sendFinishedSignal
-->sendUnchainedFinishedSignal@InputTransport.cpp


dispatcher获取事件处理结果：
threadLoop-->mDispatcher->dispatchOnce-->mLooper->pollOnce@InputDispatcher.cpp-->pollOnce
pollInner-->response.request.callback->handleEvent-->mCallback@Looper.cpp-->(dispatcher的回调)
handleReceiveCallback@InputDispatcher.cpp

frameworks/base/services/input/InputDispatcher.cpp
frameworks/base/core/java/android/view/InputChannel.java
fameworks/base/core/jni/android_view_InputChannel.cpp
frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp
frameworks/base/libs/androidfw/InputTransport.cpp
frameworks/base/core/java/android/view/InputEventReceiver.java
frameworks/base/core/jni/android_view_InputEventReceiver.cpp

============================
inputDevice:
InputDevice::addMapper-->mMappers.add@InputReader.cpp


____________________________
WindowManager中在所有其他窗口之上加入FakeWindow用来处理事件
beginLayoutLw-->WindowManagerFuncs.addFakeWindow(InputEventReceiver.Factory)@PhoneWindowManager.java-->addFakeWindow-->mInputMonitor.updateInputWindowsLw@WindowManagerService.java-->updateInputWindowsLw
-->addInputWindowHandleLw--mService.mInputManager.setInputWindows@InputMOnitor.java-->
setInputWindows@InputManagerService.java-->nativeSetInputWindows-->nativeSetInputWindows
-->im->setInputWindows-->NativeInputManager::setInputWindows-->mInputManager->getDispatcher()->setInputWindows
@com_android_server_input_InputManagerService.cpp-->InputDispatcher::setInputWindows@InputDispatcher.cpp

window中接收事件：
InputEventReceiver--@InputEventReceiver-->nativeInit-->NativeInputEventReceiver
--receiver->initialize-->NativeInputEventReceiver::initialize-->mMessageQueue->getLooper()
->addFd@android_view_inputEventReceiver.cpp

处理事件：
NativeInputEventReceiver::handleEvent-->NativeInputEventReceiver::consumeEvents-->
env->CallVoidMethod-->dispatchInputEvent@android_view_InputEventReceiver.cpp-->
dispatchInputEvent-->onInputEvent@InputEventReceiver.java


----------------------------
superDispatchKeyEvent-->mDecor.superDispatchKeyEvent@PhoneWindow.java

onKeyUp/onKeyDown


frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindow.java
============================
//注入事件
injectKeyEvent@input.java-->injectInputEvent@InputManager.java-->IInputManager.injectInputEvent()
-->nativeInjectInputEvent@com_android_server_input_InputManagerService.cpp-->
injectInputEvent{
- KEY_EVENT{
	- 验证， validateKeyEvent
	- 系统先处理，mPolicy->interceptKeyBeforeQueueing
	- 创建KeyEntry
	}
- MOTION_EVENT{
	- 验证， validateKeyEvent
	- 系统先处理，mPolicy->interceptKeyBeforeQueueing
	- 创建MotionEntry
	}
- 加入队列,enqueueInboundEventLocked
- 等待结果，injectionState->injectionResult。(dispatchKeyLocked-->setInjectionResultLocked中设置结果)
}@InputDispatcher.cpp

消耗事件：
threadLoop-->mDispatcher->dispatchOnce-->dispatchOnceInnerLocked（从mInboundQueue中取出event，
根据不同的事件调用对应的处理函数）-->dispatchKeyLocked(从这里开始处理按键事件，找到处理该事件的目标)
-->dispatchEventLocked-->prepareDispatchCycleLocked-->enqueueDispatchEntriesLocked-->
InputDispatcher::enqueueDispatchEntryLocked-->connection->inputState.trackKey && connection
->outboundQueue.enqueueAtTail@InputDispatcher.cpp

InputManagerService实现IInputManager.stub。

injectInputEvent@InputDispatcher.cpp将事件加入队列后，调用分发函数。在一个循环中等待分发结果，并返回。
其中会检查执行inject进程的权限，不被POLICY_FLAG_TRUSTED的事件不会执行interceptKeyBeforeQueueing，
也不会执行interceptKeyBeforeDispatching（所以HOME操作不会执行）。

mInboundQueue是event队列

interceptKeyBeforeQueueing一些硬件按键power，volume
interceptKeyBeforeDispatching处理HOME，SEARCH，MENU（没有BACK）

--------------------
consumed by policy:

injectInputEvent-->
dispatchOnce-->dispatchOnceInnerLocked{
- 根据不同事件进行分发
- 按键事件TYPE_KEY{
	- 若有DROP_REASON_BLOCKED，设置丢弃原因为blocked
	- dispatchKeyLocked
	}
- 若回复是丢弃事件，dropInboundEventLocked
}
============================
//显示触摸：Settings.System.SHOW_TOUCHES
updateShowTouchesFromSettings-->nativeSetShowTouches@InputManagerService.java
nativeSetShowTouches-->im->setShowTouches(enabled)-->NativeInputManager::setShowTouches-->
mInputManager->getReader()->requestRefreshConfiguration@com_android_server_input_InputManagerService.cpp
-->requestRefreshConfiguration(更新值mConfigurationChangesToRefresh)@InputReader.cpp

更新配置：
InputReader::loopOnce-->refreshConfigurationLocked-->device->configure-->
TouchInputMapper::configure-->configureSurface


PointerController{
 struct Locked {
	pointerSprite //用于显示的图层
 }	
}


frameworks/base/services/java/com/android/server/input/InputManagerService.java
frameworks/base/services/jni/com_android_server_input_InputManagerService.cpp
frameworks/base/services/input/InputReader.cpp
frameworks/base/services/input/SpriteController.h
___________________________
//触摸位置：Settings.System.POINTER_LOCATION

Settings.System.getInt(Settings.System.POINTER_LOCATION)，发生改变-->
mHandler.sendEmptyMessage(MSG_ENABLE_POINTER_LOCATION)-->handleMessage-->
enablePointerLocation{
- 创建视图和布局，mPointerLocationView。
- 加入窗口，wm.addView(mPointerLocationView)
- 创建事件通道，mPointerLocationInputChannel
- 
}



frameworks/base/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
============================
//获取事件：
创建socket对：InputChannel[0]系统写入事件，InputChannel[1]客户端读取事件
InputChannel.openInputChannelPair

注册到input写入者：InputChannel[0]
nativeRegisterInputChannel

注册获取者：InputChannel[1]
InputEventReceiver(InputChannel inputChannel, Looper looper)


