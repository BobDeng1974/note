mPolicy构造：
mPolicy = PolicyManager.makeNewWindowManager()@WindowManagerService.java-->makeNewWindowManager-->
sPolicy.makeNewWindowManager()@PolicyManager.java-->makeNewWindowManager@Policy.java-->
new PhoneWindowManager()@PhoneWindowManager.java

mPolicy初始化：
main-->WMThread.start-->WMThread.run-->new WindowManagerService-->(开始新线程)new PolicyThread().start
-->PolicyThread.run--mPolicy.init@WindowManagerService.java-->init@PhoneWindowManager.java-->
mWindowManagerFuncs= WindowManagerService

===============================
布局：

PhoneWindowManager：
屏幕坐标(0,0)在竖屏左上角。屏幕旋转后也按该坐标计算



屏幕大小，不管导航条是隐藏还是显示。
    int mUnrestrictedScreenLeft, mUnrestrictedScreenTop;
    int mUnrestrictedScreenWidth, mUnrestrictedScreenHeight;  //屏幕大小

当导航条不能隐藏时，大小不包括导航条
    int mRestrictedScreenLeft, mRestrictedScreenTop;
    int mRestrictedScreenWidth, mRestrictedScreenHeight;      //去除导航条的屏幕

布局期间，所有可视的用户界面。(状态条，导航条都是可视时且不在动画中。否则大小还是包含这些位置)
    int mSystemLeft, mSystemTop, mSystemRight, mSystemBottom; //去除导航条，状态条

应用所占的区域
    int mStableLeft, mStableTop, mStableRight, mStableBottom; //去除导航条，状态条


    int mStableFullscreenLeft, mStableFullscreenTop;
    int mStableFullscreenRight, mStableFullscreenBottom;      //去除导航条


布局期间，包括所有的窗口组件的区域。（这三组基本一样）
    int mCurLeft, mCurTop, mCurRight, mCurBottom;//除了状态条，和输入法窗口

    int mContentLeft, mContentTop, mContentRight, mContentBottom;//与上面基本相同

    int mDockLeft, mDockTop, mDockRight, mDockBottom;   //输入法窗口所在，不包括状态栏，导航栏

__________________________
FLAG_FULLSCREEN :能够隐藏状态条


==========================
beginLayout()函数：(调整状态条，导航条)
	mUnrestrictedScreenLeft = mUnrestrictedScreenTop = 0;
        mUnrestrictedScreenWidth = displayWidth;
        mUnrestrictedScreenHeight = displayHeight;

        mRestrictedScreenLeft = mRestrictedScreenTop = 0;
        mRestrictedScreenWidth = displayWidth;
        mRestrictedScreenHeight = displayHeight;

        mDockLeft = mContentLeft = mStableLeft = mStableFullscreenLeft
                = mSystemLeft = mCurLeft = 0;
        mDockTop = mContentTop = mStableTop = mStableFullscreenTop
                = mSystemTop = mCurTop = 0;
        mDockRight = mContentRight = mStableRight = mStableFullscreenRight
                = mSystemRight = mCurRight = displayWidth;
        mDockBottom = mContentBottom = mStableBottom = mStableFullscreenBottom
                = mSystemBottom = mCurBottom = displayHeight;

_______________________
如果导航条屏幕最底部：

应用程序的窗口底部，在导航条的顶部位置。
mStableBottom = mStableFullscreenBottom = mTmpNavigationFrame.top

如果导航条可视，mDockBottom在导航条处，否则在屏幕底部。
mDockBottom = mTmpNavigationFrame.top;//底部坐标去除导航条部分
mRestrictedScreenHeight = mDockBottom - mDockTop;//高度去除导航条部分

mSystemBottom = mTmpNavigationFrame.top;//去除导航条

mContentTop = mCurTop = mDockTop;//内容，当前四边形坐标都设为mDock
mContentBottom = mCurBottom = mDockBottom;
mContentLeft = mCurLeft = mDockLeft;
mContentRight = mCurRight = mDockRight;

______________________
如果有状态条：

mStableTop = mUnrestrictedScreenTop + mStatusBarHeight;//应用窗口，去除状态条

状态条可见：
mDockTop = mUnrestrictedScreenTop + mStatusBarHeight;//顶点坐标，去除状态条                
mContentTop = mCurTop = mDockTop;
mContentBottom = mCurBottom = mDockBottom;
mContentLeft = mCurLeft = mDockLeft;
mContentRight = mCurRight = mDockRight;



===========================
//调整windowState的frame大小
computeFrameLw(Rect parentFrame, Rect displayFrame,Rect contentFrame, Rect visibleFrame)
{
-设置了缩放标识，则根据LayoutParams中值设置窗口长宽。否则根据请求(测量的值)值设置长宽
-根据在容器中偏移位置，大小，计算窗口帧大小。Gravity.apply(判断在容器中靠哪个边，调整帧坐标)
-根据显示器大小，调整帧。Gravity.applyDisplay(根据gravity属性，若帧超出显示器大小，是裁剪，还是根据差值调整)
-根据内容容器，可视容器调整帧大小，使帧位于这些容器之中不会超出
}

//确定布局前的窗口大小
beginLayoutLw{
-判断是否隐藏事件捕获窗口(用在全屏显示时)
-若有导航条，确定导航条大小，调整可用窗口
-若有状态条，确定状态条大小，调整可用窗口
-确定mContentTop ， mCurTop ， mDockTop的值
}

确定窗口大小((不再调整状态条，导航条):
View.SYSTEM_UI_FLAG_FULLSCREEN  //请求全屏状态，但不是一直全屏，用户触摸会退出全屏
LayoutParams.FLAG_FULLSCREEN          //全屏显示，用户可一直处于全屏状态
LayoutParams.FLAG_LAYOUT_INSET_DECOR  //在全屏布局时，系统设置插边值。使要显示内容不被遮挡
LayoutParams.FLAG_LAYOUT_IN_SCREEN     //将应用放置在全屏上(可能被状态条，导航遮挡。但布局使用全屏值)

//计算窗口的大小
layoutWindowLw(win){
-是否要根据输入法调整可用窗口，offsetInputMethodWindowLw(将当前可用窗口减去输入法窗口)
-若是输入法窗口，则窗口容器大小为mDock---,并设置gravity属性为底部
-其他窗口：
 -非全屏状态，但使用全屏值布局(大多数应用如此)：
   -关联到其它窗口时，则使用其他窗口大小
   -没有关联到其他窗口：
	-窗口是状态面板，df，pf的大小是restricted(除导航条)
 	-请求布局SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION，可能被遮挡。df，pf为mUnrestricted(全屏)
	-否则是df，pf是mRestricted(除了导航条)
	-根据是否考虑输入法大小，设置cf，vf
  
 -请求全屏
	-窗口是状态面板，df，pf的大小是restricted(除导航条)
	-导航条，df，pf是mUnrestricted(全屏)
	-SYSTEM_OVERLAY，或BOOT_PROGRESS，df，pf是mUnrestricted(全屏)
	-应用窗口，隐藏导航调，df，pf，cf都为mUnrestricted
	-其他df，pf，cf都为mUnrestricted
	-根据是否考虑输入法大小，vf
 -关联到其他窗口，设置为与其他窗口相同大小
 -其他情形
	-状态条面板，df，pf，cf都为mrestricted(去掉导航条)
	-其他，pf设置为mContentxxxx,df,cf根据是否考虑输入法窗口设置为mDockxxx，mContentxxx。vf设置mCurxxx

-计算窗口大小win.computeFrameLw(pf, df, cf, vf);	
}



获取插边大小：
getContentInsetHintLw{
- 
- 
}@PhoneWindowManager.java

===========================
windowManagerServcie端窗口：

mWindows     //Z轴上的排序。从最底层开始算

mFakeWindows //窗口从上到下，存放在其中

窗口的实际层次：
windowState.mWinAnimator.mAnimLayer

____________________________
TYPE_LAYER_MULTIPLIER = 10000 //每种类型窗口的间隔
TYPE_LAYER_OFFSET = 1000   //同一层次中移动窗口的偏移值
WINDOW_LAYER_MULTIPLIER = 5 //每个窗口的间隔


窗口层次：
windowTypeToLayerLw

子窗口层次：
subWindowTypeToLayerLw


____________________________
加入窗口：
adjustWindowParamsLw(设置一些窗口不可触摸属性，toast,overlay)
prepareAddWindowLw(判断是否可加入窗口，如果是系统窗口状态栏，输入法...只能加入一次)

加入开始窗口：
addStartingWindow(IBinder appToken, String packageName, int theme,
            CompatibilityInfo compatInfo, CharSequence nonLocalizedLabel, int labelRes,
            int icon, int windowFlags) {
- theme是否和context中主题不一致，则context中theme设置为theme
- 创建窗口，PolicyManager.makeNewWindow(context)
- 窗口若不显示开始窗口，或显示壁纸。则返回
- 设置窗口标题，类型，属性，布局
- 获取窗口DeocrView,并加入到窗口服务中
- 返回DecorView
}
============================

打开屏幕：
enableScreenAfterBoot{
	/*读取盖子状态
	readLidState-->mWindowManagerFuncs.getLidState()@PhoneWindowManager.java-->
	getLidState-->mInputManager.getSwitchState@WindowManagerService.java-->
	nativeGetSwitchState@InputManagerService.java
	*/
        readLidState();     
	
	/*合上后，关闭按键背光。机器进入睡眠

	*/      
        applyLidSwitchState();
	
	/*
	updateRotation-->mWindowManager.updateRotation@PhoneWindowManager.java-->
	updateRotation-->updateRotationUnchecked-->updateRotationUncheckedLocked
	@WindowManagerService.java
	*/
        updateRotation(true);     
}
============================
动画：
finishAnimationLw{
}




