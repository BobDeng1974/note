//heavy-weight进程，只有一个activity运行其中？？？

//启动1
startActivity-->mMainStack.startActivityMayWait(caller, intent, resolvedType,
                grantedUriPermissions, grantedMode, resultTo, resultWho,
                requestCode, onlyIfNeeded, debug, null, null){
- 根据intent获取ResolveInfo，AppGlobals.getPackageManager().resolveIntent
- 获取的ResolveInfo中activityInfo不为空，则是指intent的组件，intent.setComponent

- 保存调用则的pid，uid

- 若activity是heavy-weight进程，FLAG_CANT_SAVE_STATE{
	- activity进程名和app包名相同中{//构建intent,弹出新旧heavy-weight的activity选择框供用户选择
		- mHeavyWeightProcess不为空，且与activity要运行的进程不同{
			- caller不为空，获取caller所在进程，mService.getRecordForAppLocked
			- 获取结果返回目标，getIntentSenderLocked
			}
		}
	}
- 启动，startActivityLocked
- 
}

//启动2
//设置返回目标，新建ActivityRecord
startActivityLocked(IApplicationThread caller,
            Intent intent, String resolvedType, ActivityInfo aInfo, IBinder resultTo,
            String resultWho, int requestCode,
            int callingPid, int callingUid, int startFlags, Bundle options,
            boolean componentSpecified, ActivityRecord[] outActivity) {
- 获取ProcessRecord callerApp，
- 获取发送目标ActivityRecord resultRecord，
- 若设置FLAG_ACTIVITY_FORWARD_RESULT{// 设置返回结果到a1，a1-->a2-->当前
	- 将返回结果设置到，
	}
- 检查intent中组件，类是否存在。若不存在发送失败结果sendActivityResultLocked
- 检查启动权限
- 主栈mMainStack中且mService.mController不为空{
	- 是否放弃启动
	}
- 创建new ActivityRecord
- 是mMainStack中{
	- 判断是否可以进行activity切换,mResumedActivity为空或是mResumedActivity的进程发起的启动{
		- 判断是否可以进行切换，checkAppSwitchAllowedLocked
		}
	- 启动服务中没有正常启动的activity，mService.doPendingActivityLaunchesLocked
	}
- 执行启动，startActivityUncheckedLocked
- 返回结果
}

//启动3
//1，找到要启动activity所在的task，并将task移动到最前位置。执行处理task的操作(清空，复位..)
//2，移动已启动的activity到最前位置，
//3，activity没有启动，则进行启动操作
startActivityUncheckedLocked(ActivityRecord r,
            ActivityRecord sourceRecord, int startFlags, boolean doResume,
            Bundle options) {
- 是否设置FLAG_ACTIVITY_NO_USER_ACTION，用户切换activity时不调用
- activity是否延迟resume，r.delayedResume
- FLAG_ACTIVITY_PREVIOUS_IS_TOP，当前activity不是最上的activity
- 根据Flag判断acivity是否启动到新task中
- 若启动需返回结果，且启动在新task中。则立即发送CANCLE结果，后设置返回目标为空
- 在新task中启动且不在多task中启动，或启动单例{
	- 不发送结果r.resultTo为空{
		- 从task或mHistory中，查找intent对应task中最前的ActivityRecord
		- 查找到对应的ActivityRecord taskTop{//已经启动过或确定了task
			- 获取最前面的ActivityRecord,topRunningNonDelayedActivityLocked		
			- 若最前面不为空，且task也不为空{
				- 启动者为空或在最前的task中{
					- 是否要显示主页，moveHomeToFrontFromLaunchLocked
					- 移动要启动的任务到最前，moveTaskToFrontLocked
					}			
				}
			- FLAG_ACTIVITY_RESET_TASK_IF_NEEDED，复位任务
			- START_FLAG_ONLY_IF_NEEDED，判断是否执行resumeTopActivityLocked。返回
			- 是否清除task中所有activity，performClearTaskLocked
			  else 是否清除要启动activity之上的所有activity,performClearTaskLocked
			  else task中最前activity就是要启动的activity
			  else FLAG_ACTIVITY_RESET_TASK_IF_NEEDED，加入到task中
			  else 
			- 若不用加入到task中，且不复用该task。执行resumeTopActivityLocked，返回
			- 
			}
		}
	}
- 已经在栈的最前，且不需要再启动(FLAG_ACTIVITY_SINGLE_TOP)。判断是否执行resumeTopActivityLocked，返回
- 新建task{
	- 怎将task计数mService.mCurTask++
	- 新建task,r.setTask(new TaskRecord)
	}
  else 启动者不为空{//不新建，就是加入已有的
	- 已启动，FLAG_ACTIVITY_CLEAR_TOP清除被启动activity以上的activity
	- 已启动，FLAG_ACTIVITY_REORDER_TO_FRONT移动被启动activity到栈顶位置
	}
  else 加入到最前的task中，不存在就新建task
- 启动，startActivityLocked

}

//启动4
startActivityLocked(ActivityRecord r, boolean newTask,
            boolean doResume, boolean keepCurTransition, Bundle options) {
- 不是新建task{
	- mHistory中查找相同task的activity，记录该位置
	  若不显示加入到该activity之上后返回
	}
- 加入mHistory.add，r.putInHistory
- 存在多个activity{
	- 
	- FLAG_ACTIVITY_NO_ANIMATION是否设置切换动画。mService.mWindowManager.prepareAppTransition
	- 加入应用标记，mService.mWindowManager.addAppToken
	- 是否复用开始窗口，设置开始窗口mService.mWindowManager.setAppStartingWindow
	}
- mHistory中没有其他activity。向窗口服务器加入应用mService.mWindowManager.addAppToken
- 验证ActviityStacke端和WindowManger端activity是否同步，validateAppTokensLocked
- 恢复栈顶的activity，resumeTopActivityLocked
}

resumeTopActivityLocked(ActivityRecord prev)-->
resumeTopActivityLocked(ActivityRecord prev, Bundle options){
- 
}

//设置heavy-weight进程mHeavyWeightProcess
realStartActivityLocked{
- 
- 应用信息中标记了ApplicationInfo.FLAG_CANT_SAVE_STATE{
	- 若进程名与应用包名相同，设置mHeavyWeightProcess
	}
}@ActivityStack.java

frameworks/base/services/java/com/android/server/am/ActivityStack.java
frameworks/base/services/java/com/android/server/am/ActivityManagerService.java


_________________________
查找intent的进程：
resolveActivity{
- AppGlobals.getPackageManager().resolveIntent
}@ActivityStack.java


ActivityRecord{
- processName = aInfo.processName;
}@ActivityRecord.java


getProcessRecordLocked(r.processName,r.info.applicationInfo.uid)@ActivityManagerService.java


判断栈中是否有改进程的activity：
Activity.appProcess == appProcess;
