//
1- Obtain an instance of Camera from open(int).
2- Get existing (default) settings with getParameters().
3- If necessary, modify the returned Camera.Parameters object and call setParameters(Camera.Parameters).
4- If desired, call setDisplayOrientation(int).
5- Important: Pass a fully initialized SurfaceHolder to setPreviewDisplay(SurfaceHolder). 
   Without a surface, the camera will be unable to start the preview.
6- Important: Call startPreview() to start updating the preview surface.
   Preview must be started before you can take a picture.
7- When you want, call takePicture(Camera.ShutterCallback, Camera.PictureCallback, 
   Camera.PictureCallback, Camera.PictureCallback) to capture a photo. Wait for the callbacks to provide the actual image data.
8- After taking a picture, preview display will have stopped. To take more photos, 
   call startPreview() again first.
9- Call stopPreview() to stop updating the preview surface.
10- Important: Call release() to release the camera for use by other applications. 
    Applications should release the camera immediately in onPause()

使用camera流程{
- public static Camera open (int cameraId)
- void setParameters (Camera.Parameters params)
- public final void setPreviewDisplay (SurfaceHolder holder)
- public final void startPreview ()
- public final void release ()
}


{
- public List<int[]> getSupportedPreviewFpsRange () //获取支持的预览帧率
- public List<Camera.Size> getSupportedPreviewSizes () //获取支持的大小
- public void setPreviewFpsRange (int min, int max) //设置预览帧率
- public void setPreviewSize (int width, int height) //设置预览大小
- public void setRotation (int rotation) //设置旋转
}@Camera.java

//打开
Camera.open-->new Camera-->cameraInitNormal-->cameraInitVersion(cameraId, CAMERA_HAL_API_VERSION_NORMAL_CONNECT)
-->native_setup(this,cameraId){
- 
}

Camera::connect(int cameraId, const String16& clientPackageName ...)-->CameraBaseT<Camera>::connect{
- Camera c = new Camera(cameraId) 
- ICameraService cs = getCameraService
- cs.get()->*fnConnectService-->ICameraService.()
}


frameworks/base/core/java/android/hardware/Camera.java
frameworks/base/core/jni/android_hardware_Camera.cpp
frameworks/av/camera/include/camera/Camera.h
frameworks/av/camera/Camera.cpp
frameworks/av/camera/include/camera/CameraBase.h
frameworks/av/camera/CameraBase.cpp
