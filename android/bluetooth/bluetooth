//服务：
mSystemServiceManager.startService(BluetoothService.class)@SystemServer.java
BluetoothService-->new BluetoothManagerService@BluetoothService.java-->
BluetoothManagerService{
- loadStoredNameAndAddress//加载蓝牙名字地址
- mEnableExternal //蓝牙是否打开
}@BluetoothManagerService

mSystemServiceManager.startBootPhase@SystemServer.java-->startBootPhase-->
service.onBootPhase@SystemServiceManager.java-->onBootPhase(PHASE_SYSTEM_SERVICES_READY)
-->mBluetoothManagerService.handleOnBootPhase@BluetoothService.java-->
handleOnBootPhase{
- sendEnableMsg(mQuietEnableExternal)-->handleEnable-->doBind//打开蓝牙
- getNameAndAddress-->handleMessage(MESSAGE_GET_NAME_AND_ADDRESS)
}@BluetoothManagerService.java


//adapter初始化
getDefaultAdapter-->new BluetoothAdapter(managerService)

//打开蓝牙
enable@BluetoothAdapter.java-->mManagerService.enable-->enable{
- 保存设置值，persistBluetoothSetting(Settings.Global.BLUETOOTH_ON)
- sendEnableMsg-->handleMessage(MESSAGE_ENABLE)-->handleEnable
}@BluetoothManagerService.java


frameworks/base/services/java/com/android/server/SystemServer.java
frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
frameworks/base/services/core/java/com/android/server/BluetoothService.java
frameworks/base/services/core/java/com/android/server/BluetoothManagerService.java
frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java


实现profile：

//bind到服务
onCreate{
- AdapterServiceBinder
- AdapterState.make
}@AdapterService.java

processMessage-->adapterService.processStart@AdapterState.java-->setProfileServiceState
-->(启动Config.PROFILE_SERVICES中所有服务)startService@AdapterService.java

@AdapterState.java

apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterState.java
apps/Bluetooth/src/com/android/bluetooth/avrcp/AvrcpControllerService.java
//============应用
- 扫描设备
- 查看已配对设备
- Establish RFCOMM channels
- 连接(多个连接)，传输数据


1 获取adapter，BluetoothAdapter.getDefaultAdapter()
2 打开蓝牙,enable
3 查询以配对设备，BluetoothAdapter.getBondedDevices()
4 查找设备，BluetoothAdapter.startDiscovery

连接：
作为server-
1 通过BluetoothDevice.listenUsingRfcommWithServiceRecord获取BluetoothServerSocket
2 监听等待连接，BluetoothServerSocket.accept
3 BluetoothServerSocket.close

作为client-
1 通过BluetoothDevice.createRfcommSocketToServiceRecord(UUID)获取BluetoothSocket
2 BluetoothSocket.connect()


