//服务：
mSystemServiceManager.startService(BluetoothService.class)@SystemServer.java
BluetoothService-->new BluetoothManagerService@BluetoothService.java-->
BluetoothManagerService{
- loadStoredNameAndAddress//加载蓝牙名字地址
- mEnableExternal //蓝牙是否打开
}@BluetoothManagerService

mSystemServiceManager.startBootPhase@SystemServer.java-->startBootPhase-->
service.onBootPhase@SystemServiceManager.java-->onBootPhase(PHASE_SYSTEM_SERVICES_READY)
-->mBluetoothManagerService.handleOnBootPhase@BluetoothService.java-->
handleOnBootPhase{
- sendEnableMsg(mQuietEnableExternal)-->handleEnable-->doBind//打开蓝牙
- getNameAndAddress-->handleMessage(MESSAGE_GET_NAME_AND_ADDRESS)
}@BluetoothManagerService.java


//adapter初始化
getDefaultAdapter-->new BluetoothAdapter(managerService)

//打开蓝牙
enable@BluetoothAdapter.java-->mManagerService.enable-->enable{
- 保存设置值，persistBluetoothSetting(Settings.Global.BLUETOOTH_ON)
- sendEnableMsg-->handleMessage(MESSAGE_ENABLE)-->handleEnable
}@BluetoothManagerService.java


frameworks/base/services/java/com/android/server/SystemServer.java
frameworks/base/services/core/java/com/android/server/SystemServiceManager.java
frameworks/base/services/core/java/com/android/server/BluetoothService.java
frameworks/base/services/core/java/com/android/server/BluetoothManagerService.java
frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
//#################接口
定义各种profile：

BluetoothAdapter.getProfileProxy(AVRCP_CONTROLLER)@BluetoothAdapter.java-->
new BluetoothAvrcpController-->doBind(连接到activiton为IBluetoothAvrcpController的服务)
-->bindServiceAsUser@BluetoothAvrcpController.java

frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
frameworks/base/core/java/android/bluetooth/
frameworks/base/core/java/android/bluetooth/BluetoothAvrcpController.java


实现profile：

//bind到服务
onCreate{
- AdapterServiceBinder
- AdapterState.make
}@AdapterService.java

processMessage-->adapterService.processStart@AdapterState.java-->setProfileServiceState
-->(启动Config.PROFILE_SERVICES中所有服务)startService@AdapterService.java

@AdapterState.java

apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterState.java
apps/Bluetooth/src/com/android/bluetooth/avrcp/AvrcpControllerService.java
#################应用
- 扫描设备
- 查看已配对设备
- Establish RFCOMM channels
- 连接(多个连接)，传输数据


1 获取adapter，BluetoothAdapter.getDefaultAdapter()
2 打开蓝牙,enable
3 查询以配对设备，BluetoothAdapter.getBondedDevices()
4 查找设备，BluetoothAdapter.startDiscovery

连接：
作为server-
1 通过BluetoothDevice.listenUsingRfcommWithServiceRecord获取BluetoothServerSocket
2 监听等待连接，BluetoothServerSocket.accept
3 BluetoothServerSocket.close

作为client-
1 通过BluetoothDevice.createRfcommSocketToServiceRecord(UUID)获取BluetoothSocket
2 BluetoothSocket.connect()


================
BluetoothProfile：


- 获取adapter 
- 通过getProfileProxy()建立连接 
- 设置BluetoothProfile.ServiceListener.监听服务的连接和断开 
- onServiceConnected()返回profile proxy对象 
- 执行操作
________________


getProfileProxy{
- new BluetoothHeadset
- new BluetoothA2dp
- new BluetoothA2dpSink
- new BluetoothHeadsetClient
- ....

}@BluetoothAdapter.java


frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
================
hfpclient:

HeadsetClientStateMachine{
- addState(mDisconnected)
- addState(mConnecting)
- addState(mConnected)
- addState(mAudioOn, mConnected) //audioOn父状态为mConnect
}

Connected.processMessage{
- 
- 栈事件，STACK_EVENT 
 - EVENT_TYPE_VOLUME_CHANGED，设置音量
 
}


//进入/退出设置STREAM_BLUETOOTH_SCO
AudioOn.processMessgae{
- DISCONNECT_AUDIO
- STACK_EVENT
	- processConnectionEvent
	- processAudioEvent
}

stack设置音量：
volume_change_cb-->CallVoidMethod(method_onVolumeChange)@com_android_bluetooth_hfpclient.cpp
-->onVolumeChange-->sendMessage(STACK_EVENT)@HeadsetClientStateMachine.java

mBroadcastReceiver.onReceive-->mStateMachine.sendMessage(SET_SPEAKER_VOLUME)
@HeadsetClientService.java-->Connected.processMessage(若是协议栈操作)-->
(本地操作)setVolumeNative-->@HeadsetClientStateMachine.java

Bluetooth/src/com/android/bluetooth/hfpclient/HeadsetClientService.java
Bluetooth/src/com/android/bluetooth/hfpclient/HeadsetClientStateMachine.java
Bluetooth/jni/com_android_bluetooth_hfpclient.cpp

==============
//a2dp
a2dpSinkStateMachine{
- addState(mDisconnected)
- addState(mPending)
- addState(mConnected)
- setInitialState(mDisconnected)  //初始状态
- mIntentBroadcastHandler
}

//栈事件
bta2dp_connection_state_callback-->sCallbackEnv->CallVoidMethod(method_onConnectionStateChanged)
@com_android_bluetooth_a2dp_sink.cpp-->onAudioStateChanged@A2dpSinkStateMachine.java

//Disconnect
connect-->mStateMachine.sendMessage(CONNECT)@A2dpSinkService.java-->
Disconnected.processMessage(connect){
- 广播消息，broadcastConnectionState(STATE_DISCONNECTED,STATE_CONNECTING)
- transitionTo(mPending)-->Pending.enter
}@A2dpSinkStateMachine.java

//Pending
processMessage-->processConnectionEvent(CONNECTION_STATE_CONNECTED)-->
transitionTo(mConnected)@A2dpSinkStateMachine.java


//Connected


//广播
broadcastConnectionState-->mIntentBroadcastHandler.sendMessageDelayed-->
IntentBroadcastHandler.handleMessage


Bluetooth/src/com/android/bluetooth/a2dp/A2dpSinkStateMachine.java
Bluetooth/src/com/android/bluetooth/a2dp/A2dpSinkService.java
Bluetooth/jni/com_android_bluetooth_a2dp_sink.cpp

=================
//pbap(phone book access profile)
BluetoothPbapClient{
- 设置，mClientHandler
- new BluetoothPbapSession(device, mSessionHandler)
}

connect@BluetoothPbapClient.java-->start/makeRequest-->RfcommConnectThread.run
-->handleMessage(RFCOMM_CONNECTED)-->startObexSession@BluetoothPbapSession.java
BluetoothPbapObexSession.start-->ObexClientThread.start-->run{
- mRequest.execute(mClientSession)
- mSessionHandler.obtainMessage(OBEX_SESSION_REQUEST_COMPLETED
}@BluetoothPbapObexSession.java

//执行命令
pullVcardListing/pullPhoneBook-->mSession.makeRequest@BluetoothPbapClient.java-->
mObexSession.schedule-->notify(唤醒等待)
ObexClientThread.run{
- this.wait() //等待notify
- mRequest.execute(mClientSession)
- mSessionHandler.obtainMessage(OBEX_SESSION_REQUEST_COMPLETED)
}@BluetoothPbapObexSession.java

//接收请求结果
handleMessage(OBEX_SESSION_REQUEST_COMPLETED)-->mParentHandler.obtainMessage(REQUEST_COMPLETED)
@BluetoothPbapSession.java-->SessionHandler.handleMessage(SessionHandler)-->client.sendToClient
-->mClientHandler.obtainMessage().sendToTagert@BluetoothPbapClient.java-->



frameworks/opt/bluetooth/src/android/bluetooth/client/pbap/BluetoothPbapClient.java
frameworks/opt/bluetooth/src/android/bluetooth/client/pbap/BluetoothPbapSession.java
frameworks/opt/bluetooth/src/android/bluetooth/client/pbap/BluetoothPbapObexSession.java
