//从hal层读取同步信号，给到EventThread

//设置间隔
DispSync::setPeriod{
- mPeriod
- mThread->updateModel
}

//加入监听器
DispSync::addEventListener-->mThread->addEventListener-->
DispSyncThread.addEventListener{
- 初始化listener.mLastEventTime 
- 加入到mEventListeners
- 触发判断mCond.signal()
}

//移除监听
DispSync::removeEventListener-->mThread->removeEventListener

//触发监听器回调
DispSync::DispSync-->DispSyncThread.threadLoop{
- 计算下一次触发时间，computeNextEventTimeLocked
- 等待mCond.waitRelative
- 时间到了
- 收集回调，gatherCallbackInvocationsLocked{
	- 计算监听器的触发时间(上一次触发时间+mPeriod)computeListenerNextEventTimeLocked
	- 如果可以触发，加入到回调callbackInvocations.push
	}
- 触发回调，fireCallbackInvocations-->callbacks[i].mCallback->onDispSyncEvent
	-->DispSyncSource::onDispSyncEvent-->callback->onVSyncEvent@SurfaceFlinger.cpp-->
	onVSyncEvent@EventThread.cpp
	
}

frameworks/native/services/surfaceflinger/DispSync.cpp
