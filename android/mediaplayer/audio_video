//==============================
mediaPlayer服务：
service media-->mediaserver@init.rc-->main@main_mediaserver.cpp-->instantiate-->addService(String16("media.player"),)@MediaPlayerService.cpp

AudioManager服务:
ServiceManager.addService(Context.AUDIO_SERVICE, new AudioService(context)@SystemServer.java

audioFlinger服务：
main-->AudioFlinger::instantiate()@main_mediaserver.cpp-->publish-->(加入服务“media.audio_flinger”)
sm->addService(String16(SERVICE::getServiceName()), new SERVICE(), allowIsolated)@BinderService.h
-->(初始化服务)

AudioSystemThread.run

服务作用：
StagefrightMetadataRetriever //获取多媒体文件信息
StagefrightPlayer            //播放多媒体文件
MediaRecorderClient          //多媒体文件录制 

==============================
使用MediaPlayer播放:(播放一般使用前端服务，调用startForeground(NOTIFICATION_ID, notification))
-new MediaPlayer();
-setAudioStreamType(AudioManager.STREAM_MUSIC)
-setDataSource(getApplicationContext(), myUri)
-prepare()//获取源，解码。导致耗时长，mediaPlayer使用另一线程执行
-start()，pause，stop
-release
______________________________
初始：
new MediaPlayer-->native_setup@MediaPlayer.java-->android_media_MediaPlayer_native_setup(设置player)
@android_media_MediaPlayer.cpp-->new MediaPlayer(创建本地mediaPlayer)@mediaplayer.cpp

______________________________
创建服务端player代理：
setDataSource@MediaPlayer.java-->android_media_MediaPlayer_setDataSourceFD@android_media_MediaPlayer.cpp
-->setDataSource(创建代理player，并attachNewPlayer)-->service->create@mediaplayer.cpp-->
(跨进程调用服务创建)create{
- 创建服务端client,new Client()
- 将client加入容器，mClients.add
}@MediaPlayerService.cpp

通过player代理创建服务端播放器：
setDataSource-->player->setDataSource@mediaplayer.cpp-->(跨进程)Client::setDataSource(source){
- 获取播放器类型，getPlayerType(source)-->getDefaultPlayerType(默认播放器类型)
- 创建播放器，setDataSource_pre
- 设置源setDataSource_post，p->setDataSource(url, headers)
}@MediaPlayerService.cpp

setDataSource_pre{
- 根据播放类型创建播放器，Client::createPlayer-->android::createPlayer{
	- 传入通知函数notifyFunc，MediaPlayerService::Client::notify()
	- 创建播放器new MstPlayer,StagefrightPlayer
	}
- 设置声音输出类，new AudioOutput

}@MediaPlayerService.cpp

播放器设置源(StagefrightPlayer)：
Client::createPlayer-->android::createPlayer--new StagefrightPlayer@MediaPlayerService.cpp-->
mPlayer(new AwesomePlayer)--mPlayer->setListener(this)@StagefrightPlayer.cpp

p->setDataSource@MediaPlayerService.cpp-->StagefrightPlayer::setDataSource-->
mPlayer->setDataSource@StagefrightPlayer.cpp-->AwesomePlayer::setDataSource-->
setDataSource_l(const sp<MediaExtractor> &extractor){
- 通过extractor获取多媒体文件信息
- 是否有音，视频，设置源setVideoSource(mVideoTrack)，setAudioSource(mAudioTrack)

}@AwesomePlayer.cpp
______________________________
prepare：
prepare@MediaPlayer.java-->android_media_MediaPlayer_prepare-->mp->prepare()-->
@android_media_MediaPlayer.cpp-->prepare-->prepareAsync_l-->mPlayer->prepareAsync@mediaplayer.cpp
-->(跨进程)Client::prepareAsync--> p->prepareAsync-->Mplayer->prepareAsync@MediaPlayerService.cpp
-->prepareAsync@StagefrightPlayer.cpp-->prepareAsync-->prepareAsync_l-->mQueue.
postEvent(mAsyncPrepareEvent)-->onPrepareAsyncEvent{
- 是网络播放，finishSetDataSource_l
- 若有视频，初始化解码器initVideoDecoder
- 若有音频，初始化解码器initAudioDecoder
- 是网络源,postBufferingEvent_l
- 本地源,finishAsyncPrepare_l{
		- 通知监听器，已经准备好，notifyListener_l-->mListener.sendEvent@-->mNotify-->
		  notifyFunc@MediaPlayerInterface.h-->MediaPlayerService::Client::notify-->
		  client->mClient->notify-->
	}
}@AwesomePlayer.cpp

初始化视频播放器：
onPrepareAsyncEvent(若初始化解码器失败，则返回)-->initVideoDecoder{
- 根据视频格式创建解码器，mVideoSource = OMXCodec::Create(mVideoTrack->getFormat())
- 

}

OMXCodec::Create-->new OMXCodec@OMXCodec.cpp
______________________________
开始播放start：
start-->_start@MediaPlayer.java-->android_media_MediaPlayer_start-->mp->start()
@android_media_MediaPlayer.cpp-->start(设置音量，auxLevel)-->mPlayer->start@mediaplayer.cpp
-->(服务端)MediaPlayerService::Client::start-->p->start@MediaPlayerService.java-->
StagefrightPlayer::start-->mPlayer->play()@StagefrightPlayer.cpp-->play-->
AwesomePlayer::play-->play_l-->postVideoEvent_l-->mVideoEvent.fire-->onVideoEvent{
-

}@AwesomePlayer.cpp


创建视频渲染器：
postVideoEvent_l-->mVideoEvent-->onVideoEvent-->initRenderer_l-->mVideoRenderer = 
new AwesomeNativeWindowRenderer@AwesomePlayer.cpp


消息队列处理：
postTimedEvent-->mQueue.insert(将事件加入队列)@TimedEventQueue.cpp

threadEntry(遍历对类，处理事件)-->event->fire@TimedEventQueue.cpp

frameworks/av/media/libstagefright/TimedEventQueue.cpp
==============================
mediaplayer服务端：


==============================
使用服务播放音效：
playSoundEffect@AudioManager.java-->sendMsg(MSG_PLAY_SOUND_EFFECT)-->(消息处理)AudioHandler.
handleMessage-->playSoundEffect-->(设置mediaPlayer播放)mediaPlayer.start()@AudioService.java

_______________________________
使用AudioTrack：
- new AudioTrack
- audioTrack.play()
- audioTrack.write()

创建：
new AudioTrack{
- 检查参数，audioParamCheck{
	- 流类型
	- 编码格式,记录通道(channel)数
	}
- 检测buffer大小
- native_setup-->android_media_AudioTrack_native_setup{
	- 
	- 创建本地AudioTrack
	- 创建数据保存类AudioTrackJniStorage
	- 设置Audiorack格式，采样率...。AudioTrack::set
	- 设置AudioTrack到java类的nativeTrackInJavaObj，setAudioTrack
	}
}@AudioTrack.java

写入数据：
write-->native_write_byte@AudioTrack.java-->android_media_AudioTrack_native_write_byte{
- 获取本地AudioTrack
- 创建音频数据数组，env->GetByteArrayElements
- writeToTrack{
	- 若AudioTrack的buffer大小为0，则AudioTrack.write()
	- 否则写入buffer中，
	}
}@android_media_AudioTrack.cpp

播放：
play-->native_start@AudioTrack.java-->android_media_AudioTrack_start-->
AudioTrack.start@android_media_AudioTrack.cpp


frameworks/base/media/java/android/media/MediaPlayer.java
frameworks/base/media/jni/android_media_MediaPlayer.cpp
frameworks/av/media/libmedia/mediaplayer.cpp
frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp
frameworks/av/media/libmediaplayerservice/StagefrightPlayer.cpp
frameworks/av/media/libstagefright/AwesomePlayer.cpp
frameworks/av/include/media/MediaPlayerInterface.h
frameworks/av/media/libstagefright/OMXCodec.cpp

frameworks/base/media/java/android/media/AudioTrack.java
frameworks/base/core/jni/android_media_AudioTrack.cpp
frameworks/base/core/jni/AndroidRuntime.cpp
frameworks/av/media/libmedia/AudioSystem.cpp

==============================
监听线控等其他事件：
通过manifiest.mxl和registerMediaButtonEventReceiver注册。接收广播事件android.intent.action.MEDIA_BUTTON

排外注册(现在manifest.xml中说明，注册后只有注册的receiver收到事件)：
registerMediaButtonEventReceiver-->registerMediaButtonIntent@AudioManager.java-->registerMediaButtonIntent
-->pushMediaButtonReceiver(将receiver入栈)@AudioService.java

dispatchMediaKeyEvent-->(如果注册过PendingIntent，执行send)-->(否则广播MEDIA_BUTTON)sendOrderedBroadcast
_______________________________
播放前获取audio focus：
请求：audioManager.requestAudioFocus(listener,streamtype,短暂请求或长时请求)
释放：播放完成后调用audioManager.abandonAudioFocus(), 并注销AudioManager.OnAudioFocusChangeListener

申请短时focus可以允许，其他声音一直播放并降低声音。

丢失焦点处理：OnAudioFocusChangeListener.onAudioFocusChange
永久丢失焦点:注销mediaButton的监听，释放焦点
暂时丢失焦点：暂停播放，再次获得焦点后继续
允许降音：降低播放音，再次获得焦点后设置声音正常。

OnAudioFocusChangeListener afChangeListener = new OnAudioFocusChangeListener() {
    public void onAudioFocusChange(int focusChange) {
        if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT
            // Pause playback
        } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {
            // Resume playback 
        } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS) {
            am.unregisterMediaButtonEventReceiver(RemoteControlReceiver);
            am.abandonAudioFocus(afChangeListener);
            // Stop playback
        }
    }
};
_______________________________
录音：
1. android.media.MediaRecorder.
2. MediaRecorder.setAudioSource(). 如 MediaRecorder.AudioSource.MIC
3. MediaRecorder.setOutputFormat().
4. MediaRecorder.setOutputFile().
5. MediaRecorder.setAudioEncoder().
6. MediaRecorder.prepare().
7. MediaRecorder.start().
8. MediaRecorder.stop().
9. MediaRecorder.release().

初始化：
new MediaRecorder-->native_setup@MediaRecorder.java-->native_setup-->
android_media_MediaRecorder_native_setup-->mr = new MediaRecorder-->
setMediaRecorder(env, thiz, mr)-->env->SetIntField(thiz, fields.context, (int)recorder.get())
设置fields.context@android_media_MediaRecorder_setAudioSource

设置音源：
MediaRecorder.setAudioSource-->android_media_MediaRecorder_setAudioSource-->mr->setAudioSource
@android_media_MediaRecorder.cpp-->setAudioSource-->mMediaRecorder->setAudioSource-->
createMediaRecorder->setAudioSource@MediaRecorder.cpp-->MediaRecorderClient.setAudioSource-->mRecorder->
setAudioSource@MediaRecorderClient.cpp-->setAudioSource-->mAudioSource = as@StagefrightRecorder.cpp

开始录音：
MediaRecorder.start()-->android_media_MediaRecorder_start-->mr->start()@android_media_MediaRecorder.cpp
start-->mMediaRecorder->start@mediarecorder.cpp-->start-->mRecorder->start()@MediaRecorderClient.cpp
-->start-->如startMPEG4Recording-->setupMPEG4Recording(打包属性)--mWriter->start@StagefrightRecorder.cpp


初始化：
MediaRecorder(构造方法)-->getMediaPlayerService()->createMediaRecorder@MediaRecorder.cpp-->

frameworks/base/media/java/android/media/MediaRecorder.java
frameworks/base/media/jni/android_media_MediaRecorder.cpp
frameworks/av/media/libmedia/mediarecorder.cpp
frameworks/av/media/libmediaplayerservice/MediaRecorderClient.cpp
frameworks/av/media/libmediaplayerservice/StagefrightRecorder.cpp


####################################
Video:




